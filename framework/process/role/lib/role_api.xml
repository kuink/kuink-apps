<?xml version="1.0" encoding="UTF-8"?>
<Node>
  <Doc>
    <Description><![CDATA[ Role API  ::  Allows the communication with 'fw_role' table and all the related ones. ]]></Description>
  </Doc>
  <Permissions/>
  <Configuration/>
  <Libraries>
    <Use name="UtilsLib" type="lib"/>
  </Libraries>
  
   
  
  
  <!-- _________________________________________________________________________________________________________________________________
    *
    *
    *		    L I B R A R Y    ::    
    *
    *		_________________________________________________________________________________________________________________________________
  -->
  <Library>
    <!--
			*		add  |  Creates a new role in a company.
			*
			*		PARAMS
			*		 - (text) name			 ::  Role's name;
			*		 - (text) code			 ::  Role's code;
			*    - (int) id_company  ::  Company's id;
      *		 - (int) is_active   ::  1 if this role is active; 0, otherwise.
			*
			*		RETURN
			*    - (int) id_role  ::  Returns the created 'fw_role' record's id.
      *
			*		ERRORS
			*	   - (code) -1  ::  Returns -1 if there's already a role in the company with the given code.
		-->
    <Function scope="public" name="add" doc="Creates a new role in a company.">
      <Params>
        <Param name="name" type="text" required="true" doc="Role's name"/>
        <Param name="code" type="text" required="true" doc="Role's code"/>
        <Param name="id_company" type="int" required="true" doc="Company's id"/>
        <Param name="is_active" type="int" required="true" doc="1 if this role is active; 0, otherwise"/>
      </Params>
			<Return type="int" doc="The created 'fw_role' record's id."/>
      <Errors>
        <Error code="-1" doc="There's already a role in the company with the given code."/>
      </Errors>

      <Begin>       
        <!-- Validates the received parameters -->
        <Var name="result">
          <Call function="validateRole">
            <Param name="code"><Var name="PARAMS" key="code"/></Param>
            <Param name="id_company"><Var name="PARAMS" key="id_company"/></Param>
            <Param name="is_insert">1</Param>
          </Call>
        </Var>

        <!-- If validation's ok, proceeds to insert -->
        <If condition="$result == 0">
          <Then>
            <!-- Creates the record -->
            <Var name="role" key="id">
              <DataAccess method="insert" params="PARAMS">
                <Param name="_entity">fw_role</Param>
                <Param name="_id_updater"><Var name="USER" key="id"/></Param>
                <Param name="_modification"><Now/></Param>
                <Param name="_modification_ip"><Var name="USER" key="ip"/></Param>
                <Param name="_id_creator"><Var name="USER" key="id"/></Param>
                <Param name="_creation"><Now/></Param>
                <Param name="_creation_ip"><Var name="USER" key="ip"/></Param>
              </DataAccess>
            </Var>
            <!-- Logs this action (with the newly created record) -->
            <Var name="role">
              <Call function="getById">
                <Param name="id"><Var name="role" key="id"/></Param>
              </Call>
            </Var>
            <Call library="framework,log,api" function="add">
              <Param name="type">framework,role,api</Param>
              <Param name="action">insert</Param>
              <Param name="log_key"><Var name="role" key="id"/></Param>
              <Param name="context_data">
                <UtilsLib method="jsonEncode">
                  <Param><Var name="role"/></Param>
                </UtilsLib>
              </Param>
              <Param name="message">
                <Lang key="logRoleInsert">
                  <Param><Var name="PARAMS" key="code"/></Param>
                </Lang>
              </Param>
            </Call>

            <!-- Returns role's id -->
            <Var name="result"><Var name="role" key="id"/></Var>
          </Then>
        </If>

        <Return>
          <Var name="result"/>
        </Return>
      </Begin>
    </Function>


    <!--
			*		delete  |  Deletes a role.
			*  
			*		PARAMS
			*		 - (int) id  ::  Role's id.
      *
			*		RETURN
			*    - (int) 0  ::  Returns 0 if the role was deleted.
      *
			*		ERRORS
			*	   - (code) -1  ::  Returns -1 if the role doesn't exist.
		-->
    <Function scope="public" name="delete" doc="Deletes a role.">
      <Params>
        <Param name="id" type="int" required="true" doc="Role's id"/>
      </Params>
      <Return type="int" doc="0 if the role was deleted."/>
      <Errors>
        <Error code="-1" doc="The role doesn't exist."/>
      </Errors>

      <Begin>
        <Var name="error">0</Var>
        
        <!-- Checks if the role exists:
          . If it doesn't, returns -1;
          . If it does, proceeds to delete.
        -->
        <Var name="role">
          <Call function="getById">
            <Param name="id"><Var name="PARAMS" key="id"/></Param>
          </Call>
        </Var>
        <If condition="$role->id == ''">
          <Then>
            <Var name="error">-1</Var>
          </Then>
          <Else>
            <DataAccess method="delete">
              <Param name="_entity">fw_role</Param>
              <Param name="id"><Var name="PARAMS" key="id"/></Param>
            </DataAccess>
            <!-- Logs this action -->
            <Call library="framework,log,api" function="add">
              <Param name="type">framework,role,api</Param>
              <Param name="action">delete</Param>
              <Param name="log_key"><Var name="PARAMS" key="id"/></Param>
              <Param name="context_data">
                <UtilsLib method="jsonEncode">
                  <Param><Var name="role"/></Param>
                </UtilsLib>
              </Param>
              <Param name="message">
                <Lang key="logRoleDelete">
                  <Param><Var name="role" key="code"/></Param>
                </Lang>
              </Param>
            </Call>
          </Else>
        </If>
        
        <Return>
          <Var name="error"/>
        </Return>
      </Begin>
    </Function>


    <!--
			*		getAll  |  Gets a list of all the existing roles. Can be filtered by company and/or active.
			*
			*		PARAMS
      *    - (int) id_company  ::  To filter by the company;
      *		 - (int) is_active   ::  1 to filter by the active roles.
      *
			*		RETURN
			*	   - (multiple) fw_role  ::  Returns a set of 'fw_role' records.
		-->
    <Function scope="public" name="getAll" doc="Gets a list of all the existing roles. Can be filtered by company and/or active.">
      <Params>
        <Param name="id_company" type="int" required="false" doc="To filter by the company"/>
        <Param name="is_active" type="int" required="false" doc="1 to filter by the active roles"/>
      </Params>
			<Return type="multiple" doc="Set of 'fw_role' records."/>

      <Begin>
        <!-- All roles (from all companies and whether they are active or not) -->
        <If condition="$PARAMS->id_company == '' &amp;&amp; $PARAMS->is_active == ''">
          <Then>
            <Var name="roles">
              <DataAccess method="getAll">
                <Param name="_entity">fw_role</Param>
                <Param name="_sort">id_company, name, code</Param>
              </DataAccess>
            </Var>
          </Then>
        </If>
        
        <!-- Active roles (from all companies) -->
        <If condition="$PARAMS->is_active == 1">
          <Then>
            <Var name="roles">
              <DataAccess method="getAll">
                <Param name="_entity">fw_role</Param>
                <Param name="is_active">1</Param>
                <Param name="_sort">id_company, name, code</Param>
              </DataAccess>
            </Var>
          </Then>
        </If>
        
        <!-- Company roles -->
        <If condition="$PARAMS->id_company != ''">
          <Then>
            <!-- Active -->
            <If condition="$PARAMS->is_active == 1">
              <Then>
                <Var name="roles">
                  <DataAccess method="getAll">
                    <Param name="_entity">fw_role</Param>
                    <Param name="id_company"><Var name="PARAMS" key="id_company"/></Param>
                    <Param name="is_active">1</Param>
                    <Param name="_sort">code, name</Param>
                  </DataAccess>
                </Var>
              </Then>
              <Else>
                <!-- All -->
                <Var name="roles">
                  <DataAccess method="getAll">
                    <Param name="_entity">fw_role</Param>
                    <Param name="id_company"><Var name="PARAMS" key="id_company"/></Param>
                    <Param name="_sort">code, name</Param>
                  </DataAccess>
                </Var>
              </Else>
            </If>
          </Then>
        </If>

				<Return>
					<Var name="roles"/>
				</Return>
      </Begin>
    </Function>


    <!--
			*		getByCode  |  Gets a role in a company, given its code.
			*
			*		PARAMS
			*    - (text) code       ::  Role's code;
			*    - (int) id_company  ::  Company's id.
			*  
			*		RETURN
			*	   - (single) fw_role  ::  Returns the corresponding 'fw_role' record. 
		-->
    <Function scope="public" name="getByCode" doc="Gets a role in a company, given its code.">
      <Params>
        <Param name="code" type="text" required="true" doc="Role's code"/>
        <Param name="id_company" type="int" required="true" doc="Company's id"/>
      </Params>
      <Return type="single" doc="The corresponding 'fw_role' record."/>

      <Begin>
        <Var name="role">
          <DataAccess method="load">
            <Param name="_entity">fw_role</Param>
            <Param name="code"><Var name="PARAMS" key="code"/></Param>
            <Param name="id_company"><Var name="PARAMS" key="id_company"/></Param>
          </DataAccess>
        </Var>

        <Return>
          <Var name="role"/>
        </Return>
      </Begin>
    </Function>


    <!--
			*		getById  |  Gets a role in a company, given its id.
			*
			*		PARAMS
			*    - (int) id  ::  Role's id.
			*  
			*		RETURN
			*	   - (single) fw_role  ::  Returns the corresponding 'fw_role' record. 
		-->
    <Function scope="public" name="getById" doc="Gets a role in a company, given its id.">
      <Params>
        <Param name="id" type="int" required="true" doc="Role's id"/>
      </Params>
      <Return type="single" doc="The corresponding 'fw_role' record."/>

      <Begin>
        <Var name="role">
          <DataAccess method="load">
            <Param name="_entity">fw_role</Param>
            <Param name="id"><Var name="PARAMS" key="id"/></Param>
          </DataAccess>
        </Var>

        <Return>
          <Var name="role"/>
        </Return>
      </Begin>
    </Function>
    
    
    <!--
      *		getCapabilities  |  Gets a list of all the capabilities that a role have.
      *
      *		PARAMS
			*    - (int) id          ::  Role's id;
			*    - (text) code       ::  Role's code;
      *    - (int) id_company  ::  Role's and capability's company.
      *
      *		RETURN
			*	   - (multiple) fw_capability  ::  Returns a set of 'fw_capability' records.
    -->
    <Function scope="public" name="getCapabilities" doc="Gets a list of all the capabilities that a role have.">
      <Params>
        <Param name="id" type="int" required="false" doc="Role's id"/>
        <Param name="code" type="text" required="false" doc="Role's code"/>
        <Param name="id_company" type="int" required="true" doc="Role's and capability's company"/>
      </Params>
      <Return type="multiple" doc="Set of 'fw_capability' records."/>
    
      <Begin>
        <!-- According to the params, gets the capabilities by one of the following options:
          . The role's id and company;
          . The role's code and company.
        -->
        <If condition="$PARAMS->id != ''">
          <Then>
            <Var name="capabilities">
              <DataAccess method="this,this,getCapabilities">
                <Param name="id"><Var name="PARAMS" key="id"/></Param>
                <Param name="id_company"><Var name="PARAMS" key="id_company"/></Param>
              </DataAccess>
            </Var>
          </Then>
          <Else>
            <If condition="$PARAMS->code != ''">
              <Then>
                <Var name="capabilities">
                  <DataAccess method="this,this,getCapabilities">
                    <Param name="code"><Var name="PARAMS" key="code"/></Param>
                    <Param name="id_company"><Var name="PARAMS" key="id_company"/></Param>
                  </DataAccess>
                </Var>
              </Then>
            </If>
          </Else>
        </If>
        
        <Return>
          <Var name="capabilities"/>
        </Return>
      </Begin>
    </Function>


    <!--
			*		search  |  Gets a list of roles that meet the given criteria. 
      *
			*		PARAMS
			*    - (int) id_company     ::  Role's company;
      *    - (text) text          ::  Role's id, name or code;
      *		 - (int) is_active      ::  1 to filter by the active roles;
      *    - (text) capabilities  ::  Role's capabilities' list;
      *		 - (int) pageNum        ::  Page to get;
      *		 - (int) pageSize       ::  Number of records per page.
			*
			*		RETURN
			*	   - (multiple) fw_role  ::  Returns a set of 'fw_role' records.
		--> 
    <Function scope="public" name="search" doc="Gets a list of roles that meet the given criteria.">
      <Params>
        <Param name="id_company" type="int" required="true" doc="Role's company"/>
        <Param name="text" type="text" required="false" doc="Role's id, name or code"/>
        <Param name="is_active" type="int" required="false" doc="1 to filter by the active roles"/>
        <Param name="capabilities" type="text" required="false" doc="Role's capabilities' list"/>
        <Param name="pageNum" type="int" required="false" doc="Page to get"/>
        <Param name="pageSize" type="int" required="false" doc="Number of records per page"/>
      </Params>
      <Return type="multiple" doc="Set of 'fw_role' records."/>

      <Begin>
        <Var name="roles">
          <DataAccess method="this,this,search">
            <Param name="id_company"><Var name="PARAMS" key="id_company"/></Param>
            <Param name="text" wildcard="fullSplit"><Var name="PARAMS" key="text"/></Param>
            <Param name="is_active"><Var name="PARAMS" key="is_active"/></Param>
            <Param name="capabilities"><Var name="PARAMS" key="capabilities"/></Param>
            <Param name="_pageNum"><Var name="PARAMS" key="pageNum"/></Param>
            <Param name="_pageSize"><Var name="PARAMS" key="pageSize"/></Param>
          </DataAccess>
        </Var>
         
        <Return>
          <Var name="roles"/>  
        </Return>
      </Begin>
    </Function>


    <!--
			*		update  |  Updates a role.
      *  
			*		PARAMS
			*		 - (int) id          ::  Role's id;
			*    - (text) name       ::  Role's name;
			*		 - (text) code       ::  Role's code;
			*    - (int) id_company  ::  Company's id;
      *		 - (int) is_active   ::  1 if the role is active; 0, otherwise.
      *
			*		RETURN
			*    - (int) 0  ::  Returns 0 if the role was updated.
      *
			*		ERRORS
      *    - (code) -1  ::  Returns -1 if there's already a role in the company with the given code.
		-->
    <Function scope="public" name="update" doc="Updates a role.">
      <Params>
        <Param name="id" type="int" required="true" doc="Role's id"/>
        <Param name="name" type="text" required="true" doc="Role's name"/>
        <Param name="code" type="text" required="true" doc="Role's code"/>
        <Param name="id_company" type="int" required="true" doc="Company's id"/>
        <Param name="is_active" type="int" required="true" doc="1 if the role is active; 0, otherwise"/>
      </Params>
      <Return type="int" doc="0 if the role was updated."/>
      <Errors>
        <Error code="-1" doc="There's already a role in the company with the given code."/>
      </Errors>

      <Begin>
        <!-- Validates the received parameters -->
        <Var name="result">
          <Call function="validateRole">
            <Param name="id"><Var name="PARAMS" key="id"/></Param>
            <Param name="code"><Var name="PARAMS" key="code"/></Param>
            <Param name="id_company"><Var name="PARAMS" key="id_company"/></Param>
            <Param name="is_insert">0</Param>
          </Call>
        </Var>

        <!-- If validation's ok, proceeds to update -->
        <If condition="$result == 0">
          <Then>
            <DataAccess method="update" params="PARAMS">
              <Param name="_entity">fw_role</Param>
              <Param name="_id_updater"><Var name="USER" key="id"/></Param>
              <Param name="_modification"><Now/></Param>
              <Param name="_modification_ip"><Var name="USER" key="ip"/></Param>
            </DataAccess>
            <!-- Logs this action (with the updated record) -->
            <Var name="updatedRole">
              <Call function="getById">
                <Param name="id"><Var name="PARAMS" key="id"/></Param>
              </Call>
            </Var>
            <Call library="framework,log,api" function="add">
              <Param name="type">framework,role,api</Param>
              <Param name="action">update</Param>
              <Param name="log_key"><Var name="PARAMS" key="id"/></Param>
              <Param name="context_data">
                <UtilsLib method="jsonEncode">
                  <Param><Var name="updatedRole"/></Param>
                </UtilsLib>
              </Param>
              <Param name="message">
                <Lang key="logRoleUpdate">
                  <Param><Var name="PARAMS" key="code"/></Param>
                </Lang>
              </Param>
            </Call>
          </Then>
        </If>

        <Return>
          <Var name="result"/>
        </Return>
      </Begin>
    </Function>


    <!--
			*		validateRole  |  Validates the parameters of a role.
			*
			*		PARAMS
			*		 - (int) id			     ::  Role's id;
      *		 - (text) code			 ::  Role's code;
      *    - (int) id_company  ::  Company's id;
      *    - (int) is_insert   ::  1 if it's a new role; 0 if it's an update.
			*
			*		RETURN
			*    - (int) 0  ::  Returns 0 if all the params are valid.
      *
			*		ERRORS
			*	   - (code) -1  ::  Returns -1 if there's already a role in the company with the given code.
    -->
    <Function scope="private" name="validateRole" doc="Validates the parameters of a role.">
      <Params>
        <Param name="id" type="int" required="false" doc="Role's id"/>
        <Param name="code" type="text" required="true" doc="Role's code"/>
        <Param name="id_company" type="int" required="true" doc="Company's id"/>
        <Param name="is_insert" type="int" required="true" doc="1 if it's a new role; 0 if it's an update"/>
      </Params>
			<Return type="int" doc="0 if all the params are valid."/>
      <Errors>
        <Error code="-1" doc="There's already a role in the company with the given code."/>
      </Errors>
      
      <Begin>
        <Var name="error">0</Var>

        <!-- Gets the role, through the code. Returns -1 if:
          . It's a new role and it already exists;
          OR
          . It's an update and it exists another one with the given code;
        -->
        <Var name="role">
          <Call function="getByCode">
            <Param name="code"><Var name="PARAMS" key="code"/></Param>
            <Param name="id_company"><Var name="PARAMS" key="id_company"/></Param>
          </Call>
        </Var>
        <If condition="($role->id != '') &amp;&amp; (($PARAMS->is_insert == 1) || ($PARAMS->is_insert == 0 &amp;&amp; $role->id != $PARAMS->id))">
          <Then><Var name="error">-1</Var></Then>
        </If>
        
        <Return>
          <Var name="error"/>
        </Return>
      </Begin>
    </Function>
  </Library>
</Node>
