<?xml version="1.0" encoding="UTF-8"?>
<Node>
  <Doc>
    <![CDATA[ Role API  ::  Allows the communication with 'fw_role' table. ]]>
  </Doc>
  <Permissions/>
  <Configuration/>
  <Libraries>
    <Use name="UtilsLib" type="lib"/>
  </Libraries>
  <Params/>
  <Screens/>
  <Actions/>
  <Library forceinterface="true">
    <!--
			*		add  |  Adds a new role to a company.
			*
			*		PARAMS
			*    - (int) id_company  ::  Company's id;
			*		 - (text) name			 ::  Role's name;
			*		 - (text) code			 ::  Role's code;
			*		 - (int) is_active   ::  1 if this role is active; 0, otherwise.
			*
			*		RETURN
			*    - (int) id_role  ::  Returns the created 'fw_role' record's id.
      *
			*		ERRORS
			*	   - (code) -1  ::  Returns -1 if the company doesn't exist.
      *    - (code) -2  ::  Returns -2 if the role already exists in the company.
		-->
    <Function name="add" scope="public" doc="Adds a new role to a company.">
      <Params>
        <Param name="id_company" type="int" required="true" doc="Company's id"/>
        <Param name="name" type="text" required="true" doc="Role's name"/>
        <Param name="code" type="text" required="true" doc="Role's code"/>
        <Param name="is_active" type="int" required="true" doc="1 if this role is active; 0, otherwise"/>
      </Params>
			<Return type="int" doc="The created 'fw_role' record's id."/>
      <Errors>
        <Error code="-1" doc="The company doesn't exist."/>
        <Error code="-2" doc="The role already exists in the company."/>
      </Errors>

      <Begin>       
        <!-- Validates the received parameters -->
        <Var name="result">
          <Call function="validateRole">
            <Param name="code"><Var name="PARAMS" key="code"/></Param>
            <Param name="id_company"><Var name="PARAMS" key="id_company"/></Param>
            <Param name="is_insert">1</Param>
          </Call>
        </Var>

        <!-- If everything is in order, proceeds to insert -->
        <If condition="$result == 0">
          <Then>
            <!-- Creates the record -->
            <Var name="role" key="id">
              <DataAccess method="insert">
                <Param name="_entity">fw_role</Param>
                <Param name="id_company"><Var name="PARAMS" key="id_company"/></Param>
                <Param name="name"><Var name="PARAMS" key="name"/></Param>
                <Param name="code"><Var name="PARAMS" key="code"/></Param>
                <Param name="is_active"><Var name="PARAMS" key="is_active"/></Param>
                <Param name="_id_updater"><Var name="USER" key="id"/></Param>
                <Param name="_modification"><Now/></Param>
                <Param name="_modification_ip"><Var name="USER" key="ip"/></Param>
                <Param name="_id_creator"><Var name="USER" key="id"/></Param>
                <Param name="_creation"><Now/></Param>
                <Param name="_creation_ip"><Var name="USER" key="ip"/></Param>
              </DataAccess>
            </Var>
            <!-- Gets the record just created -->
            <Var name="role">
              <Call function="getById">
                <Param name="id"><Var name="role" key="id"/></Param>
              </Call>
            </Var>
            <!-- Logs this action -->
            <Call library="framework,log,api" function="add">
              <Param name="type">framework,role,api</Param>
              <Param name="action">insert</Param>
              <Param name="log_key"><Var name="role" key="id"/></Param>
              <Param name="context_data">
                <UtilsLib method="jsonEncode">
                  <Param><Var name="role"/></Param>
                </UtilsLib>
              </Param>
              <Param name="message">
                <Lang key="logRoleInsert">
                  <Param><Var name="role" key="id"/></Param>
                  <Param><Var name="PARAMS" key="id_company"/></Param>
                </Lang>
              </Param>
            </Call>

            <!-- Returns role's id -->
            <Var name="result"><Var name="role" key="id"/></Var>
          </Then>
        </If>

        <Return>
          <Var name="result"/>
        </Return>
      </Begin>
    </Function>


    <!--
			*		delete  |  Deletes a role in a company.
			*  
			*		PARAMS
			*		 - (int) id  ::  Role's id.
      *
			*		RETURN
			*    - (int) 0  ::  Returns 0 if the role was removed.
      *
			*		ERRORS
			*	   - (code) -1  ::  Returns -1 if the role doesn't exist.
		-->
    <Function name="delete" scope="public" doc="Deletes a role in a company.">
      <Params>
        <Param name="id" type="int" required="true" doc="Role's id"/>
      </Params>
      <Return type="int" doc="0 if the role was removed."/>
      <Errors>
        <Error code="-1" doc="The role doesn't exist."/>
      </Errors>

      <Begin>   
        <!-- Sets default value -->
        <Var name="error">0</Var>

        <!-- Gets the record -->
        <Var name="role">
          <Call function="getById">
            <Param name="id"><Var name="PARAMS" key="id"/></Param>
          </Call>
        </Var>

        <!-- Checks if the role exists: if not, returns -1 -->
        <If condition="$role->__length == 0">
          <Then>
            <Var name="error">-1</Var>
          </Then>
          <Else>
            <!-- Everything is in order, proceeds to delete -->
            <!-- Deletes the record -->
            <DataAccess method="delete">
              <Param name="_entity">fw_role</Param>
              <Param name="id"><Var name="PARAMS" key="id"/></Param>
            </DataAccess>
            <!-- Logs this action -->
            <Call library="framework,log,api" function="add">
              <Param name="type">framework,role,api</Param>
              <Param name="action">delete</Param>
              <Param name="log_key"><Var name="PARAMS" key="id"/></Param>
              <Param name="context_data">
                <UtilsLib method="jsonEncode">
                  <Param><Var name="role"/></Param>
                </UtilsLib>
              </Param>
              <Param name="message">
                <Lang key="logRoleDelete">
                  <Param><Var name="PARAMS" key="id"/></Param>
                  <Param><Var name="role" key="id_company"/></Param>
                </Lang>
              </Param>
            </Call>
          </Else>
        </If>

        <Return>
          <Var name="error"/>
        </Return>
      </Begin>
    </Function>


    <!--
			*		existsInCompanyByCode  |  Checks if a role exists in a company, given its code.
			*
			*		PARAMS
			*    - (text) code       ::  Role's code;
			*    - (int) id_company  ::  Company's id.
      *  
			*		RETURN
			*	   - (int) 0 | 1  ::  Returns 1 if the role exists; 0, if it doesn't.
      *
			*		ERRORS
			*	   - (code) -1  ::  Returns -1 if the company doesn't exist.
		-->
    <Function name="existsInCompanyByCode" scope="public" doc="Checks if a role exists in a company, given its code.">
      <Params>
        <Param name="code" type="text" required="true" doc="Role's code"/>
        <Param name="id_company" type="int" required="true" doc="Company's id"/>
      </Params>
      <Return type="int" doc="1 if the role exists; 0, if it doesn't."/>
      <Errors>
        <Error code="-1" doc="The company doesn't exist."/>
      </Errors>

      <Begin>
        <!-- Checks if the company exists -->
				<Var name="companyExists">
					<Call library="framework,company,api" function="existsById">
						<Param name="id"><Var name="PARAMS" key="id_company"/></Param>
					</Call>
				</Var>

        <!-- If it doesn't, returns -1. Else, continues -->
        <If condition="$companyExists == 0">
					<Then>
						<Var name="exists">-1</Var>
					</Then>
					<Else>
            <!-- Checks if the role exists in the company -->
            <Var name="role">
              <DataAccess method="load">
                <Param name="_entity">fw_role</Param>
                <Param name="code"><Var name="PARAMS" key="code"/></Param>
                <Param name="id_company"><Var name="PARAMS" key="id_company"/></Param>
              </DataAccess>
            </Var>
    
            <!-- If it doesn't, returns 0. If it does, returns 1 -->
            <If condition="$role->__length == 0">
              <Then>
                <Var name="exists">0</Var>
              </Then>
              <Else>
                <Var name="exists">1</Var>
              </Else>
            </If>
          </Else>
        </If>

        <Return>
          <Var name="exists"/>
        </Return>
      </Begin>
    </Function>


    <!--
			*		existsInCompanyById  |  Checks if a role exists in a company, given its id.
			*
			*		PARAMS
			*    - (int) id          ::  Role's id;
			*    - (int) id_company  ::  Company's id.
      *  
			*		RETURN
			*	   - (int) 0 | 1  ::  Returns 1 if the role exists; 0, if it doesn't.
      *
			*		ERRORS
			*	   - (code) -1  ::  Returns -1 if the company doesn't exist.
		-->
    <Function name="existsInCompanyById" scope="public" doc="Checks if a role exists in a company, given its id.">
      <Params>
        <Param name="id" type="int" required="true" doc="Role's id"/>
        <Param name="id_company" type="int" required="true" doc="Company's id"/>
      </Params>
      <Return type="int" doc="1 if the role exists; 0, if it doesn't."/>
      <Errors>
        <Error code="-1" doc="The company doesn't exist."/>
      </Errors>

      <Begin>
        <!-- Checks if the company exists -->
				<Var name="companyExists">
					<Call library="framework,company,api" function="existsById">
						<Param name="id"><Var name="PARAMS" key="id_company"/></Param>
					</Call>
				</Var>

        <!-- If it doesn't, returns -1. Else, continues -->
        <If condition="$companyExists == 0">
					<Then>
						<Var name="exists">-1</Var>
					</Then>
					<Else>
            <!-- Checks if the role exists in the company -->
            <Var name="role">
              <DataAccess method="load">
                <Param name="_entity">fw_role</Param>
                <Param name="id"><Var name="PARAMS" key="id"/></Param>
                <Param name="id_company"><Var name="PARAMS" key="id_company"/></Param>
              </DataAccess>
            </Var>
    
            <!-- If it doesn't, returns 0. If it does, returns 1 -->
            <If condition="$role->__length == 0">
              <Then>
                <Var name="exists">0</Var>
              </Then>
              <Else>
                <Var name="exists">1</Var>
              </Else>
            </If>
          </Else>
        </If>

        <Return>
          <Var name="exists"/>
        </Return>
      </Begin>
    </Function>


    <!--
			*		getAll  |  Gets a list of all existing roles (whether they are active or not) in all companies.
			*  
			*		RETURN
			*	   - (multiple) fw_role  ::  Returns all 'fw_role' records.
		-->
    <Function name="getAll" scope="public" doc="Gets a list of all existing roles (whether they are active or not) in all companies.">
      <Params/>
			<Return type="multiple" doc="All 'fw_role' records."/>

      <Begin>
        <Var name="roles">
					<DataAccess method="getAll">
						<Param name="_entity">fw_role</Param>
					</DataAccess>
				</Var>

				<Return>
					<Var name="roles"/>
				</Return>
      </Begin>
    </Function>


    <!--
			*		getAllByCompany  |  Gets a list of all existing roles (whether they are active or not) in a company.
			*
			*		PARAMS
			*    - (int) id_company  ::  Company's id.
      *
			*		RETURN
			*	   - (multiple) fw_role  ::  Returns a set of 'fw_role' records.
		-->
    <Function name="getAllByCompany" scope="public" doc="Gets a list of all existing roles (whether they are active or not) in a company.">
      <Params>
        <Param name="id_company" type="int" required="true" doc="Company's id"/>
      </Params>
			<Return type="multiple" doc="Set of 'fw_role' records."/>

      <Begin>
        <Var name="roles">
					<DataAccess method="getAll">
						<Param name="_entity">fw_role</Param>
            <Param name="id_company"><Var name="PARAMS" key="id_company"/></Param>
					</DataAccess>
				</Var>

				<Return>
					<Var name="roles"/>
				</Return>
      </Begin>
    </Function>


    <!--
			*		getActiveRoles  |  Gets a list of all active roles in all companies.
			*  
			*		RETURN
			*	   - (multiple) fw_role  ::  Returns a set of 'fw_role' records.
		-->
    <Function name="getActiveRoles" scope="public" doc="Gets a list of all active roles in all companies.">
      <Params/>
			<Return type="multiple" doc="Set of 'fw_role' records."/>

      <Begin>
        <Var name="roles">
					<DataAccess method="getAll">
						<Param name="_entity">fw_role</Param>
            <Param name="is_active"><Int>1</Int></Param>
					</DataAccess>
				</Var>

				<Return>
					<Var name="roles"/>
				</Return>
      </Begin>
    </Function>


    <!--
			*		getActiveRolesByCompany  |  Gets a list of all active roles in a company.
			*
			*		PARAMS
			*    - (int) id_company  ::  Company's id.
      *
			*		RETURN
			*	   - (multiple) fw_role  ::  Returns a set of 'fw_role' records.
		-->
    <Function name="getActiveRolesByCompany" scope="public" doc="Gets a list of all active roles in a company.">
      <Params>
        <Param name="id_company" type="int" required="true" doc="Company's id"/>
      </Params>
			<Return type="multiple" doc="Set of 'fw_role' records."/>

      <Begin>
        <Var name="roles">
					<DataAccess method="getAll">
						<Param name="_entity">fw_role</Param>
            <Param name="is_active"><Int>1</Int></Param>
            <Param name="id_company"><Var name="PARAMS" key="id_company"/></Param>
					</DataAccess>
				</Var>

				<Return>
					<Var name="roles"/>
				</Return>
      </Begin>
    </Function>


    <!--
			*		getByCode  |  Gets a role given the code.
			*
			*		PARAMS
			*    - (text) code  ::  Role's code.
			*  
			*		RETURN
			*	   - (single) fw_role  ::  Returns the corresponding 'fw_role' record. 
		-->
    <Function name="getByCode" scope="public" doc="Gets a role given the code.">
      <Params>
        <Param name="code" type="text" required="true" doc="Role's code."/>
      </Params>
      <Return type="single" doc="The corresponding 'fw_role' record."/>

      <Begin>
        <Var name="role">
          <DataAccess method="load">
            <Param name="_entity">fw_role</Param>
            <Param name="code"><Var name="PARAMS" key="code"/></Param>
          </DataAccess>
        </Var>

        <Return>
          <Var name="role"/>
        </Return>
      </Begin>
    </Function>


    <!--
			*		getById  |  Gets a role given the id.
			*
			*		PARAMS
			*    - (int) id  ::  Role's id.
			*  
			*		RETURN
			*	   - (single) fw_role  ::  Returns the corresponding 'fw_role' record. 
		-->
    <Function name="getById" scope="public" doc="Gets a role given the id.">
      <Params>
        <Param name="id" type="int" required="true" doc="Role's id"/>
      </Params>
      <Return type="single" doc="The corresponding 'fw_role' record."/>

      <Begin>
        <Var name="role">
          <DataAccess method="load">
            <Param name="_entity">fw_role</Param>
            <Param name="id"><Var name="PARAMS" key="id"/></Param>
          </DataAccess>
        </Var>

        <Return>
          <Var name="role"/>
        </Return>
      </Begin>
    </Function>


    <!--
			*		search  |  Gets a list of roles that meet the given search criteria.
			*  
			*		PARAMS
      *    - (int) id             ::  Role's id;
			*    - (text) name          ::  Role's name;
			*		 - (text) code          ::  Role's code;
      *    - (int) id_company     ::  Company's id;
      *		 - (int) is_active      ::  1 to filter by just the active roles;
      *    - (text) capabilities  ::  Role's capabilities' list;
      *		 - (int) pageNum        ::  Current page's number;
      *		 - (int) pageSize       ::  Current page's size.
			*
			*		RETURN
			*	   - (multiple) fw_role  ::  Returns a set of 'fw_role' records.
		--> 
    <Function name="search" scope="public" doc="Gets a list of roles that meet the given search criteria.">
      <Params>
        <Param name="id" type="int" required="false" doc="Role's id"/>
        <Param name="name" type="text" required="false" doc="Role's name"/>
        <Param name="code" type="text" required="false" doc="Role's code"/>
        <Param name="id_company" type="int" required="false" doc="Company's id"/>
        <Param name="is_active" type="int" required="false" doc="1 to filter by just the active roles"/>
        <Param name="capabilities" type="text" required="false" doc="Role's capabilities' list"/>
        <Param name="pageNum" type="int" required="false" doc="Current page's number"/>
        <Param name="pageSize" type="int" required="false" doc="Current page's size"/>
      </Params>
      <Return type="multiple" doc="Set of 'fw_role' records"/>

      <Begin>
        <Var name="roles">
          <DataAccess method="this,this,search">
            <Param name="id"><Var name="PARAMS" key="id"/></Param>
            <Param name="id_company"><Var name="PARAMS" key="id_company"/></Param>
            <Param name="name" wildcard="full"><Var name="PARAMS" key="name"/></Param>
            <Param name="code" wildcard="full"><Var name="PARAMS" key="code"/></Param>
            <Param name="is_active"><Var name="PARAMS" key="is_active"/></Param>
            <Param name="capabilities"><Var name="PARAMS" key="capabilities"/></Param>
            <Param name="_pageNum"><Var name="PARAMS" key="pageNum"/></Param>
            <Param name="_pageSize"><Var name="PARAMS" key="pageSize"/></Param>
          </DataAccess>
        </Var>
         
        <Return>
          <Var name="roles"/>  
        </Return>
      </Begin>
    </Function>


    <!--
			*		update  |  Updates a role.
      *  
			*		PARAMS
			*		 - (int) id          ::  Role's id;
			*    - (text) name       ::  Role's name;
			*		 - (text) code       ::  Role's code;
			*    - (int) id_company  ::  Company's id;
      *		 - (int) is_active   ::  1 if the role is active; 0, otherwise.
      *
			*		RETURN
			*    - (int) 0  ::  Returns 0 if the role was updated.
      *
			*		ERRORS
			*	   - (code) -1  ::  Returns -1 if the company doesn't exist.
      *    - (code) -2  ::  Returns -2 if there's already a role in the company with the given code..
			*	   - (code) -3  ::  Returns -3 if the role doesn't exist.
		-->
    <Function name="update" scope="public" doc="Updates a role.">
      <Params>
        <Param name="id" type="int" required="true" doc="Role's id"/>
        <Param name="name" type="text" required="true" doc="Role's name"/>
        <Param name="code" type="text" required="true" doc="Role's code"/>
        <Param name="id_company" type="int" required="true" doc="Company's id"/>
        <Param name="is_active" type="int" required="true" doc="1 if the role is active; 0, otherwise"/>
      </Params>
      <Return type="int" doc="0 if the role was updated."/>
      <Errors>
        <Error code="-1" doc="The company doesn't exist."/>
        <Error code="-2" doc="There's already a role in the company with the given code."/>
        <Error code="-3" doc="The role doesn't exist."/>
      </Errors>

      <Begin>
        <!-- Validates the received parameters -->
        <Var name="error">
          <Call function="validateRole">
            <Param name="id"><Var name="PARAMS" key="id"/></Param>
            <Param name="code"><Var name="PARAMS" key="code"/></Param>
            <Param name="id_company"><Var name="PARAMS" key="id_company"/></Param>
            <Param name="is_insert">0</Param>
          </Call>
        </Var>

        <!-- If everything is in order, proceeds to update -->
        <If condition="$error == 0">
          <Then>
            <!-- Gets the current record -->
            <Var name="role">
              <Call function="getById">
                <Param name="id"><Var name="PARAMS" key="id"/></Param>
              </Call>
            </Var>
            <!-- Updates the record -->
            <DataAccess method="update">
              <Param name="_entity">fw_role</Param>
              <Param name="id"><Var name="PARAMS" key="id"/></Param>
              <Param name="id_company"><Var name="PARAMS" key="id_company"/></Param>
              <Param name="name"><Var name="PARAMS" key="name"/></Param>
              <Param name="code"><Var name="PARAMS" key="code"/></Param>
              <Param name="is_active"><Var name="PARAMS" key="is_active"/></Param>
              <Param name="_id_updater"><Var name="USER" key="id"/></Param>
              <Param name="_modification"><Now/></Param>
              <Param name="_modification_ip"><Var name="USER" key="ip"/></Param>
            </DataAccess>
            <!-- Gets the record just updated -->
            <Var name="updatedRole" dump="true">
              <Call function="getById">
                <Param name="id"><Var name="PARAMS" key="id"/></Param>
              </Call>
            </Var>
            <!-- Logs this action -->
            <Var name="records"><Set/></Var>
            <Var name="records" key=""><Var name="role"/></Var>
            <Var name="records" key=""><Var name="updatedRole"/></Var>
            <Call library="framework,log,api" function="add">
              <Param name="type">framework,role,api</Param>
              <Param name="action">update</Param>
              <Param name="log_key"><Var name="PARAMS" key="id"/></Param>
              <Param name="context_data">
                <UtilsLib method="jsonEncode">
                  <Param><Var name="records"/></Param>
                </UtilsLib>
              </Param>
              <Param name="message">
                <Lang key="logRoleUpdate">
                  <Param><Var name="PARAMS" key="id"/></Param>
                  <Param><Var name="PARAMS" key="id_company"/></Param>
                </Lang>
              </Param>
            </Call>
          </Then>
        </If>

        <Return>
          <Var name="error"/>
        </Return>
      </Begin>
    </Function>


    <!--
			*		validateRole  |  Validates the parameters of a role.
			*
			*		PARAMS
			*		 - (int) id			     ::  Role's id;
      *		 - (text) code			 ::  Role's code;
      *    - (int) id_company  ::  Company's id;
      *    - (int) is_insert   ::  1 if it's a new role; 0 if it's an update.
			*
			*		RETURN
			*    - (int) 0  ::  Returns 0 if all params are valid.
      *
			*		ERRORS
			*	   - (code) -1  ::  Returns -1 if the company doesn't exist.
      *    - (code) -2  ::  Returns -2 if there's already a role in the company with the given code.
      *    - (code) -3  ::  Returns -3 if the role doesn't exist.
    -->
    <Function name="validateRole" scope="public" doc="Validates the parameters of a role.">
      <Params>
        <Param name="id" type="int" required="false" doc="Role's id"/>
        <Param name="code" type="text" required="false" doc="Role's code"/>
        <Param name="id_company" type="int" required="true" doc="Company's id"/>
        <Param name="is_insert" type="int" required="true" doc="1 if it's a new role; 0 if it's an update"/>
      </Params>
			<Return type="int" doc="0 if all params are valid."/>
      <Errors>
        <Error code="-1" doc="The company doesn't exist."/>
        <Error code="-2" doc="There's already a role in the company with the given code."/>
        <Error code="-3" doc="The role doesn't exist."/>
      </Errors>
      
      <Begin>
        <!-- Sets default value -->
        <Var name="error">0</Var>

        <!-- ______________  1) Company's validation    ______________ -->
        <!-- Checks if the company exists: if not, returns -1 -->
        <Var name="companyExists">
          <Call library="framework,company,api" function="existsById">
            <Param name="id"><Var name="PARAMS" key="id_company"/></Param>
          </Call>
        </Var>
        <If condition="$companyExists == 0">
          <Then>
            <Var name="error">-1</Var>
          </Then>
          <Else>
            <!-- ______________  2) Role's validation    ______________ -->
            <!-- Checks if the role exists in the company -->
            <Var name="role"><!-- For an insert and an update -->
              <Call function="getByCode">
                <Param name="code"><Var name="PARAMS" key="code"/></Param>
              </Call>
            </Var>
            <Var name="existsById"><!-- For an update, only -->
              <Call function="existsInCompanyById">
                <Param name="id"><Var name="PARAMS" key="id"/></Param>
                <Param name="id_company"><Var name="PARAMS" key="id_company"/></Param>
              </Call>
            </Var>
            <!-- 
              If it's a new role and it already exists 
              OR
              If it's a role update and it exists another one with given code,
              returns -2
            -->
            <If condition="($PARAMS->is_insert == 1 &amp;&amp; $role->__length != 0) || ($PARAMS->is_insert == 0 &amp;&amp; $role->id != $PARAMS->id)">
              <Then>
                <Var name="error">-2</Var>
              </Then>
            </If>
            <!-- If it's a role update and it doesn't exist, returns -3 -->
            <If condition="$PARAMS->is_insert == 0 &amp;&amp; $existsById == 0">
              <Then>
                <Var name="error">-3</Var>
              </Then>
            </If>
          </Else>
        </If>
        
        <Return>
          <Var name="error"/>
        </Return>
      </Begin>
    </Function>
  </Library>
</Node>
