<?xml version="1.0" encoding="UTF-8"?>
<Node>
  <Doc>
		<![CDATA[ Allocation API  ::  Allows the communication with 'fw_allocation' table and all the related ones. ]]>
	</Doc>
  <Permissions/>
  <Configuration/>
  <Libraries>
		<Use name="UtilsLib" type="lib"/>
  </Libraries>
   
   
  
  
  <!-- _________________________________________________________________________________________________________________________________
    *
    *
    *		    L I B R A R Y    ::    
    *
    *		_________________________________________________________________________________________________________________________________
  --> 
  <Library>
    <!--
			*		add  |  Assigns a role to a person or a group, in a company.
			*
			*		PARAMS
			*    - (int) id_person        ::  Person's id;
			*    - (int) id_person_group  ::  Group's id;
			*    - (int) id_role          ::  Role's id;
			*    - (int) id_company       ::  Company's id.
			*
			*		RETURN
			*    - (int) id_allocation  ::  Returns the created 'fw_allocation' record's id.
      *
			*		ERRORS
      *    - (code) -1  ::  Returns -1 if a role is assigned to a person and a group, simultaneously.
      *    - (code) -2  ::  Returns -2 if the person doesn't belong to the company.
      *    - (code) -3  ::  Returns -3 if the person/group already have the role in the company.
    -->
    <Function scope="public" name="add" doc="Assigns a role to a person or a group, in a company.">
      <Params>
        <Param name="id_person" type="int" required="false" doc="Person's id"/>
        <Param name="id_person_group" type="int" required="false" doc="Group's id"/>
        <Param name="id_role" type="int" required="true" doc="Role's id"/>
        <Param name="id_company" type="int" required="true" doc="Company's id"/>
      </Params>
			<Return type="int" doc="The created 'fw_allocation' record's id."/>
      <Errors>
        <Error code="-1" doc="A role can't be assigned to a person and a group, simultaneously."/>
        <Error code="-2" doc="The person doesn't belong to the company."/>
        <Error code="-3" doc="The person/group already have the role in the company."/>
      </Errors>

      <Begin>
        <!-- Validates the received parameters -->
        <Var name="result">
          <Call function="validateAllocation">
            <Param name="id_person"><Var name="PARAMS" key="id_person"/></Param>
            <Param name="id_person_group"><Var name="PARAMS" key="id_person_group"/></Param>
            <Param name="id_role"><Var name="PARAMS" key="id_role"/></Param>
            <Param name="id_company"><Var name="PARAMS" key="id_company"/></Param>
            <Param name="is_insert">1</Param>
          </Call>
        </Var>

        <!-- If validation's ok, proceeds to insert -->
        <If condition="$result == 0">
          <Then>
            <!-- Creates the record -->
            <Var name="allocation" key="id">
              <DataAccess method="insert" params="PARAMS">
                <Param name="_entity">fw_allocation</Param>
                <Param name="_id_updater"><Var name="USER" key="id"/></Param>
                <Param name="_modification"><Now/></Param>
                <Param name="_modification_ip"><Var name="USER" key="ip"/></Param>
                <Param name="_id_creator"><Var name="USER" key="id"/></Param>
                <Param name="_creation"><Now/></Param>
                <Param name="_creation_ip"><Var name="USER" key="ip"/></Param>
              </DataAccess>
            </Var>
            <!-- Logs this action (with the newly created record) -->
            <Var name="allocation">
              <Call function="get">
                <Param name="id"><Var name="allocation" key="id"/></Param>
              </Call>
            </Var>
            <Call library="framework,log,api" function="add">
              <Param name="type">framework,allocation,api</Param>
              <Param name="action">insert</Param>
              <Param name="log_key"><Var name="allocation" key="id"/></Param>
              <Param name="context_data">
                <UtilsLib method="jsonEncode">
                  <Param><Var name="allocation"/></Param>
                </UtilsLib>
              </Param>
              <Param name="message">
                <Lang key="logAllocationInsert">
                  <Param><Var name="allocation" key="id"/></Param>
                </Lang>
              </Param>
            </Call>

            <!-- Returns allocation's id -->
            <Var name="result"><Var name="allocation" key="id"/></Var>
          </Then>
        </If>

        <Return>
          <Var name="result"/>
        </Return>
      </Begin>
    </Function>


    <!--
			*		addByCode  |  Assigns a role to a person or a group, in a company, given the code.
			*
			*		PARAMS
			*    - (int) id_person        ::  Person's id;
			*    - (int) id_person_group  ::  Group's id;
			*    - (text) code_role       ::  Role's code;
			*    - (int) id_company       ::  Company's id.
			*
			*		RETURN
			*    - (int) id_allocation  ::  Returns the created 'fw_allocation' record's id.
      *
			*		ERRORS
      *    - (code) -1  ::  Returns -1 if a role is assigned to a person and a group, simultaneously.
      *    - (code) -2  ::  Returns -2 if the person doesn't belong to the company.
      *    - (code) -3  ::  Returns -3 if the person/group already have the role in the company.
    -->
    <Function scope="public" name="addByCode" doc="Assigns a role to a person or a group in a company, given its code.">
      <Params>
        <Param name="id_person" type="int" required="false" doc="Person's id"/>
        <Param name="id_person_group" type="int" required="false" doc="Group's id"/>
        <Param name="code_role" type="text" required="true" doc="Role's code"/>
        <Param name="id_company" type="int" required="true" doc="Company's id"/>
      </Params>
      <Return type="int" doc="The created 'fw_allocation' record's id."/>
      <Errors>
        <Error code="-1" doc="A role can't be assigned to a person and a group, simultaneously."/>
        <Error code="-2" doc="The person doesn't belong to the company."/>
        <Error code="-3" doc="The person/group already have the role in the company."/>
      </Errors>

      <Begin>
        <!-- Gets the role -->
        <Var name="role">
          <Call library="framework,role,api" function="getByCode">
            <Param name="code"><Var name="PARAMS" key="code_role"/></Param>
          </Call>
        </Var>

        <!-- Adds the role to the person/group -->
        <Var name="result">
          <Call function="add">
            <Param name="id_person"><Var name="PARAMS" key="id_person"/></Param>
            <Param name="id_person_group"><Var name="PARAMS" key="id_person_group"/></Param>
            <Param name="id_role"><Var name="role" key="id"/></Param>
            <Param name="id_company"><Var name="PARAMS" key="id_company"/></Param>
          </Call>
        </Var>

        <Return>
          <Var name="result"/>
        </Return>
      </Begin>
    </Function>


    <!--
			*		delete  |  Unassigns a role from a person or a group, in a company.
			*  
			*		PARAMS
			*		 - (int) id  ::  Allocation's id.
      *
			*		RETURN
			*    - (int) 0  ::  Returns 0 if the allocation was deleted.
      *
			*		ERRORS
			*	   - (code) -1  ::  Returns -1 if the allocation doesn't exist.
		-->
    <Function scope="public" name="delete" doc="Unassigns a role from a person or a group, in a company.">
      <Params>
        <Param name="id" type="int" required="true" doc="Allocation's id"/>
      </Params>
      <Return type="int" doc="0 if the allocation was deleted."/>
      <Errors>
        <Error code="-1" doc="The allocation doesn't exist."/>
      </Errors>

      <Begin>
        <Var name="error">0</Var>
        
        <!-- Checks if the allocation exists:
          . If it doesn't, returns -1;
          . If it does, proceeds to delete;
        -->
        <Var name="allocation">
          <Call function="get">
            <Param name="id"><Var name="PARAMS" key="id"/></Param>
          </Call>
        </Var>
        <If condition="$allocation->id == ''">
          <Then>
            <Var name="error">-1</Var>
          </Then>
          <Else>
            <DataAccess method="delete">
              <Param name="_entity">fw_allocation</Param>
              <Param name="id"><Var name="allocation" key="id"/></Param>
            </DataAccess>
            <!-- Logs this action -->
            <Call library="framework,log,api" function="add">
              <Param name="type">framework,allocation,api</Param>
              <Param name="action">delete</Param>
              <Param name="log_key"><Var name="allocation" key="id"/></Param>
              <Param name="context_data">
                <UtilsLib method="jsonEncode">
                  <Param><Var name="allocation"/></Param>
                </UtilsLib>
              </Param>
              <Param name="message">
                <Lang key="logAllocationDelete">
                  <Param><Var name="allocation" key="id"/></Param>
                </Lang>
              </Param>
            </Call>
          </Else>
        </If>

        <Return>
          <Var name="error"/>
        </Return>
      </Begin>
    </Function>


		<!--
			*		get  |  Gets an allocation, given the id.
			*
			*		PARAMS
			*    - (int) id  ::  Allocation's id.
			*
			*		RETURN
			*	   - (single) fw_allocation  ::  Returns the corresponding 'fw_allocation' record. 
		-->
    <Function scope="public" name="get" doc="Gets an allocation, given the id.">
      <Params>
        <Param name="id" type="int" required="true" doc="Allocation's id"/>
      </Params>
      <Return type="single" doc="The corresponding 'fw_allocation' record."/>

      <Begin>
        <Var name="allocation">
          <DataAccess method="load">
            <Param name="_entity">fw_allocation</Param>
            <Param name="id"><Var name="PARAMS" key="id"/></Param>
          </DataAccess>
        </Var>

        <Return>
          <Var name="allocation"/>
        </Return>
      </Begin>
    </Function>


    <!--
			*		getAll  |  Gets a list of all existing allocations. Can be filtered by company.
			*
			*		PARAMS
      *    - (int) id_company  ::  Company's id.
      *
			*		RETURN
			*	   - (multiple) fw_allocation  ::  Returns a set of 'fw_allocation' records.
		-->
    <Function scope="public" name="getAll" doc="Gets a list of all existing allocations. Can be filtered by company.">
			<Params>
        <Param name="id_company" type="int" required="false" doc="Company's id"/>
      </Params>
			<Return type="multiple" doc="Set of 'fw_allocation' records."/>

			<Begin>
        <If condition="$PARAMS->id_company == ''">
          <Then>
            <!-- Gets only the company's allocations -->
            <Var name="allocations">
              <DataAccess method="getAll">
                <Param name="_entity">fw_allocation</Param>
                <Param name="id_company"><Var name="PARAMS" key="id_company"/></Param>
              </DataAccess>
            </Var>
          </Then>
          <Else>
            <!-- Gets all the allocations -->
            <Var name="allocations">
              <DataAccess method="getAll">
                <Param name="_entity">fw_allocation</Param>
              </DataAccess>
            </Var>
          </Else>
        </If>

				<Return>
					<Var name="allocations"/>
				</Return>
			</Begin>
    </Function>


		<!--
			*		search  |  Gets a list of allocations that meet the given criteria.
			*
			*		PARAMS
			*		 - (text) text            ::  Allocation's id or role's id, name or code;
      *    - (int) id_person        ::  Person's id;
      *    - (int) id_person_group  ::  Group's id;
			*    - (int) id_role          ::  Role's id;
			*    - (int) id_company       ::  Company's id;
			*		 - (int) pageNum  	      ::  Page to get;
			*		 - (int) pageSize  	      ::  Number of records per page.
      *
			*		RETURN
			*	   - (multiple) fw_allocation  ::  Returns a set of 'fw_allocation' records.
		-->
    <Function scope="public" name="search" doc="Gets a list of allocations that meet the given criteria.">
      <Params>
        <Param name="text" type="text" required="false" doc="Allocation's id or role's id, name or code"/>
        <Param name="id_person" type="int" required="false" doc="Person's id"/>
        <Param name="id_person_group" type="int" required="false" doc="Group's id"/>
        <Param name="id_role" type="int" required="false" doc="Role's id"/>
        <Param name="id_company" type="int" required="true" doc="Company's id"/>
				<Param name="pageNum" type="int" required="false" doc="Page to get"/>
				<Param name="pageSize" type="int" required="false" doc="Number of records per page"/>
      </Params>
      <Return type="multiple" doc="Set of 'fw_allocation' records."/>

      <Begin>
        <Var name="allocations">
          <DataAccess method="this,this,search">
            <Param name="text" wildcard="fullSplit"><Var name="PARAMS" key="text"/></Param>
            <Param name="id_person"><Var name="PARAMS" key="id_person"/></Param>
            <Param name="id_person_group"><Var name="PARAMS" key="id_person_group"/></Param>
            <Param name="id_role"><Var name="PARAMS" key="id_role"/></Param>
            <Param name="id_company"><Var name="PARAMS" key="id_company"/></Param>
            <Param name="_pageNum"><Var name="PARAMS" key="pageNum"/></Param>
						<Param name="_pageSize"><Var name="PARAMS" key="pageSize"/></Param>
          </DataAccess>
        </Var>

        <Return>
          <Var name="allocations"/>
        </Return>
      </Begin>
    </Function>


    <!--
			*		update  |  Updates an allocation.
      *  
			*		PARAMS
			*		 - (int) id               ::  Allocation's id;
			*    - (int) id_person        ::  Person's id;
			*    - (int) id_person_group  ::  Group's id;
			*    - (int) id_role          ::  Role's id;
			*    - (int) id_company       ::  Company's id.
      *
			*		RETURN
			*    - (int) 0  ::  Returns 0 if the allocation was updated.
      *
			*		ERRORS
      *    - (code) -1  ::  Returns -1 if a role is assigned to a person and a group, simultaneously.
      *    - (code) -2  ::  Returns -2 if the person doesn't belong to the company.
      *    - (code) -3  ::  Returns -3 if the person/group already have the role in the company.
		-->
    <Function name="update" doc="Updates an allocation.">
      <Params>
        <Param name="id" type="int" required="true" doc="Allocation's id"/>
        <Param name="id_person" type="int" required="false" doc="Person's id"/>
        <Param name="id_person_group" type="int" required="false" doc="Group's id"/>
        <Param name="id_role" type="int" required="true" doc="Role's id"/>
        <Param name="id_company" type="int" required="true" doc="Company's id"/>
      </Params>
      <Return type="int" doc="0 if the allocation was updated."/>
      <Errors>
        <Error code="-1" doc="A role can't be assigned to a person and a group, simultaneously."/>
        <Error code="-2" doc="The person doesn't belong to the company."/>
        <Error code="-3" doc="The person/group already have the role in the company."/>
      </Errors>

      <Begin>
        <!-- Validates the params of the allocation -->
        <Var name="error">
          <Call function="validateAllocation">
            <Param name="id"><Var name="PARAMS" key="id"/></Param>
            <Param name="id_person"><Var name="PARAMS" key="id_person"/></Param>
            <Param name="id_person_group"><Var name="PARAMS" key="id_person_group"/></Param>
            <Param name="id_role"><Var name="PARAMS" key="id_role"/></Param>
            <Param name="id_company"><Var name="PARAMS" key="id_company"/></Param>
            <Param name="is_insert">0</Param>
          </Call>
        </Var>

        <!-- If validation's ok, proceeds to update -->
        <If condition="$error == 0">
          <Then>
            <DataAccess method="update">
              <Param name="_entity">fw_allocation</Param>
              <Param name="id"><Var name="PARAMS" key="id"/></Param>
              <Param name="id_person"><Var name="PARAMS" key="id_person"/></Param>
              <Param name="id_person_group"><Var name="PARAMS" key="id_person_group"/></Param>
              <Param name="id_role"><Var name="PARAMS" key="id_role"/></Param>
              <Param name="id_company"><Var name="PARAMS" key="id_company"/></Param>
              <Param name="_id_updater"><Var name="USER" key="id"/></Param>
              <Param name="_modification"><Now/></Param>
              <Param name="_modification_ip"><Var name="USER" key="ip"/></Param>
            </DataAccess>
            <!-- Logs this action (with the updated record) -->
            <Var name="updatedAllocation">
              <Call function="get">
                <Param name="id"><Var name="PARAMS" key="id"/></Param>
              </Call>
            </Var>
            <Call library="framework,log,api" function="add">
              <Param name="type">framework,allocation,api</Param>
              <Param name="action">update</Param>
              <Param name="log_key"><Var name="PARAMS" key="id"/></Param>
              <Param name="context_data">
                <UtilsLib method="jsonEncode">
                  <Param><Var name="updatedAllocation"/></Param>
                </UtilsLib>
              </Param>
              <Param name="message">
                <Lang key="logAllocationUpdate">
                  <Param><Var name="PARAMS" key="id"/></Param>
                </Lang>
              </Param>
            </Call>
          </Then>
        </If>

        <Return>
          <Var name="error"/>
        </Return>
      </Begin>
    </Function>


    <!--
			*		validateAllocation  |  Validates the parameters of an allocation.
			*
			*		PARAMS
			*    - (int) id               ::  Allocation's id;
			*    - (int) id_person        ::  Person's id;
			*    - (int) id_person_group  ::  Group's id;
			*    - (int) id_role          ::  Role's id;
			*    - (int) id_company       ::  Company's id;
      *    - (int) is_insert        ::  1 if it's a new allocation; 0 if it's an update.
			*
			*		RETURN
			*    - (int) 0  ::  Returns 0 if all the params are valid.
      *
			*		ERRORS
      *    - (code) -1  ::  Returns -1 if a role is assigned to a person and a group, simultaneously.
      *    - (code) -2  ::  Returns -2 if the person doesn't belong to the company.
      *    - (code) -3  ::  Returns -3 if the person/group already have the role in the company.
    -->
    <Function scope="private" name="validateAllocation" doc="Validates the parameters of an allocation.">
      <Params>
        <Param name="id" type="int" required="false" doc="Allocation's id"/>
        <Param name="id_person" type="int" required="false" doc="Person's id"/>
        <Param name="id_person_group" type="int" required="false" doc="Group's id"/>
        <Param name="id_role" type="int" required="true" doc="Role's id"/>
        <Param name="id_company" type="int" required="true" doc="Company's id"/>
        <Param name="is_insert" type="int" required="true" doc="1 if it's a new allocation; 0 if it's an update"/>
      </Params>
			<Return type="int" doc="0 if all the params are valid."/>
      <Errors>
        <Error code="-1" doc="A role can't be assigned to a person and a group, simultaneously."/>
        <Error code="-2" doc="The person doesn't belong to the company."/>
        <Error code="-3" doc="The person/group already have the role in the company."/>
      </Errors>
      
      <Begin>
        <Var name="error">0</Var>
        
        <!-- Checks for errors -->
        <If condition="$PARAMS->id_person_group != ''">
          <Then>
            <!-- Returns -1 if both 'id_person' and 'id_person_group' were received as params -->
            <If condition="$PARAMS->id_person != ''">
              <Then>
                <Var name="error">-1</Var> 
              </Then>
              <Else>
                <!-- Gets the allocation, through the group -->
                <Var name="allocation">
                  <DataAccess method="load">
                    <Param name="_entity">fw_allocation</Param>
                    <Param name="id_person_group"><Var name="PARAMS" key="id_person_group"/></Param>
                    <Param name="id_role"><Var name="PARAMS" key="id_role"/></Param>
                    <Param name="id_company"><Var name="PARAMS" key="id_company"/></Param>
                  </DataAccess>
                </Var>
              </Else>
            </If>
          </Then>
          <Else>
            <!-- Returns -2 if the person doesn't belong to the company -->
            <Var name="personCompany">
              <Call library="framework,fw.person,api" function="getPersonCompany">
                <Param name="id_person"><Var name="PARAMS" key="id_person"/></Param>
                <Param name="id_company"><Var name="PARAMS" key="id_company"/></Param>
              </Call>
            </Var>
            <If condition="$personCompany->id == ''">
              <Then>
                <Var name="error">-2</Var>
              </Then>
              <Else>
                <!-- Gets the allocation, through the person -->
                <Var name="allocation">
                  <DataAccess method="load">
                    <Param name="_entity">fw_allocation</Param>
                    <Param name="id_person"><Var name="PARAMS" key="id_person"/></Param>
                    <Param name="id_role"><Var name="PARAMS" key="id_role"/></Param>
                    <Param name="id_company"><Var name="PARAMS" key="id_company"/></Param>
                  </DataAccess>
                </Var>
              </Else>
            </If>
          </Else>
        </If>
        
        <!-- Returns -3 if the role was already assigned to the person/group -->  
        <If condition="($allocation->id != '') &amp;&amp; (($PARAMS->is_insert == 1) || ($PARAMS->is_insert == 0 &amp;&amp; $allocation->id != $PARAMS->id))">
          <Then><Var name="error">-3</Var></Then>
        </If>

        <Return>
          <Var name="error"/>
        </Return>
      </Begin>
    </Function>
  </Library>
</Node>
