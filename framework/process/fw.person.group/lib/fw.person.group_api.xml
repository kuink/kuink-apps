<?xml version="1.0" encoding="UTF-8"?>
<Node>
	<Doc>
    <![CDATA[ Person Group API  ::  Allows the communication with 'fw_person_group' table and all the related ones. ]]>
  </Doc>
	<Permissions/>
	<Configuration/>
	<Libraries>
		<Use name="UtilsLib" type="lib"/>
	</Libraries>
  
   
  
  
  <!-- _________________________________________________________________________________________________________________________________
    *
    *
    *		    L I B R A R Y    ::    
    *
    *		_________________________________________________________________________________________________________________________________
  -->
	<Library>		
		<Function name="add" scope="public" doc="Add a new person group type">
				<Params>
						<Param name="name" doc="Person group name"/>
						<Param name="name_communication" doc="Person group name communication"/>
						<Param name="code" doc="Person group code"/>
						<Param name="master_designation" doc="Master designation"/>
						<Param name="id_person_group_type" doc="Person group type"/>
						<Param name="uid" doc="Group UID|CN"/>
						<Param name="is_collaborative" doc="Is this a collaborative group?"/>
						<Param name="_is_system" doc="Is this a system group"/>
						<Param name="is_active" doc=""/>
				</Params>
				<Return type="single" doc=""/>
				<Begin>
						<!-- Create new record -->
						<Var name="newId">
								<DataAccess method="insert">
										<Param name="_entity">fw_person_group</Param>
										<Param name="id_person_group_type"><Var name="PARAMS" key="id_person_group_type"/></Param>
										<Param name="master_designation"><Var name="PARAMS" key="master_designation"/></Param>
										<Param name="name"><Var name="PARAMS" key="name"/></Param>
										<Param name="name_communication"><Var name="PARAMS" key="name_communication"/></Param>
										<Param name="code"><Var name="PARAMS" key="code"/></Param>
										<Param name="uid"><Var name="PARAMS" key="uid"/></Param>
										<Param name="is_collaborative"><Var name="PARAMS" key="is_collaborative"/></Param>
										<Param name="_is_system"><Var name="PARAMS" key="_is_system"/></Param>
										<Param name="is_active"><Var name="PARAMS" key="is_active"/></Param>
										<Param name="_base">true</Param>
								</DataAccess>
						</Var>
						<!-- Get the record created -->
						<Var name="record">
								<Call function="getById">
										<Param name="id">
												<Var name="newId"/>
										</Param>
								</Call>
						</Var>
						<!-- Log this action -->
						<Call library="framework,log,api" function="add">
								<Param name="type">framework,fw.person.group,api</Param>
								<Param name="action">insert</Param>
								<Param name="log_key"><Var name="record" key="id"/></Param>
								<Param name="context_data">
										<UtilsLib method="jsonEncode">
												<Param><Var name="record"/></Param>
										</UtilsLib>
								</Param>
								<Param name="message">
										<Lang key="logPersonGroupInsert">
												<Param><Var name="record" key="id"/></Param>
										</Lang>
								</Param>
						</Call>
						<Return>
								<Var name="record"/>
						</Return>
				</Begin>
		</Function>
		
		
		<Function name="get" scope="public" doc="Get a person group">
				<Params>
						<Param name="id" required="true"/>
				</Params>
				<Return type="single" doc="">
						<External name="id" type="text" doc=""/>
						<External name="name" type="text" doc=""/>
						<External name="code" type="text" doc=""/>
						<External name="master_designation" type="text" doc=""/>
						<External name="id_person_group_type" type="text" doc=""/>
						<External name="_creation" type="text" doc=""/>
						<External name="_modification" type="text" doc=""/>
						<External name="_creation_ip" type="text" doc=""/>
						<External name="_modification_ip" type="text" doc=""/>
				</Return>
				<Begin>
						<Return>
								<DataAccess method="this,this,get">
										<Param name="id"><Var name="PARAMS" key="id"/></Param>
								</DataAccess>
						</Return>
				</Begin>
		</Function>
		
		
		<Function name="getById" doc="Get a record by id from table fw_person_group">
				<Params>
					<Param name="id" type="int" required="true"/>
				</Params>
				<Return type="single"/>
				<Begin>
						<Return>
								<DataAccess method="load">
										<Param name="_entity">fw_person_group</Param>
										<Param name="id">
												<Var name="PARAMS" key="id"/>
										</Param>
								</DataAccess>
						</Return>
				</Begin>
		</Function>
		
		
		<Function name="getIdByCode" scope="public" doc="Get the id given the code of a person group type">
				<Params>
					<Param name="code" required="true"/>
				</Params>
				<Return type="int" doc="The id"/>
				<Begin>
					<Var name="record">
						<DataAccess method="load">
								<Param name="_entity">fw_person_group</Param>
								<Param name="code"><Var name="PARAMS" key="code"/></Param>
						</DataAccess>
					</Var>
					<Return><Var name="record" key="id"/></Return>
				</Begin>
		</Function>


		<!--
			*		getAll  |  Gets a list of all the existing groups.
			*
			*		PARAMS
			*    - (int) id_person_group_type  ::  Group type's id;
			*    - (text) group_type_code  		 ::  Group type's code.
			*
			*		RETURN
			*    - (multiple) fw_person_group  ::  Returns a set of 'fw_person_group' records.
		-->
		<Function scope="public" name="getAll" doc="Get all person groups">
			<Params>
				<Param name="id_person_group_type" type="int" required="false" doc="Group type's id"/>
				<Param name="group_type_code" type="text" required="false" doc="Group type's code"/>
			</Params>
			<Return type="multiple" doc="Set of 'fw_person_group' records"/>
			
			<Begin>
				<If condition="$PARAMS->group_type_code != ''">
					<Then>
						<Var name="groupType" dump="true">
							<DataAccess method="load">
								<Param name="_entity">fw_person_group_type</Param>
								<Param name="code"><Var name="group_type_code"/></Param>
							</DataAccess>
						</Var>
						<Var name="id_person_group_type" dump="true"><Var name="groupType" key="id"/></Var>
					</Then>
				</If>

				<Var name="groups">
					<If condition="$PARAMS->id_person_group_type == '' &amp;&amp; $PARAMS->group_type_code == ''">
						<Then>
							<DataAccess method="getAll">
								<Param name="_entity">fw_person_group</Param>
								<Param name="_sort">id_person_group_type, name</Param>
							</DataAccess>
						</Then>
						<Else>
							<DataAccess method="getAll">
								<Param name="_entity">fw_person_group</Param>
								<Param name="id_person_group_type"><Var name="id_person_group_type"/></Param>
								<Param name="_sort">id_person_group_type, name</Param>
							</DataAccess>
						</Else>
					</If>
				</Var>

				<Return>
					<Var name="groups"/>
				</Return>
			</Begin>
		</Function>
		
		
		<!--
			*		getAllByCompany  |  Gets a list of all the existing groups in a company.
			*
			*		PARAMS
			*    - (int) id_company  ::  Company's id.
			*
			*		RETURN
			*    - (multiple) fw_person_group  ::  Returns a set of 'fw_person_group' records.
		-->
    <Function scope="public" name="getAllByCompany" doc="Gets a list of all the existing groups in a company.">
			<Params>
        <Param name="id_company" type="int" required="true" doc="Company's id"/>
      </Params>
			<Return type="multiple" doc="Set of 'fw_person_group' records."/>

			<Begin>
				<Var name="groups">
					<DataAccess method="getAll">
						<Param name="_entity">fw_person_group</Param>
            <Param name="id_company"><Var name="PARAMS" key="id_company"/></Param>
						<Param name="is_active">1</Param>
					</DataAccess>
				</Var>

				<Return>
					<Var name="groups"/>
				</Return>
			</Begin>
    </Function>
		
		
		<!--
			*		getActive  |  Gets a list of all the active groups.
			*
			*		PARAMS
			*
			*		RETURN
			*    - (multiple) fw_person_group  ::  Returns a set of 'fw_person_group' records.
		-->
		<Function scope="public" name="getActive" doc="Gets a list of all the active groups.">
			<Params/>
			<Return type="multiple" doc="Set of 'fw_person_group' records"/>
			
			<Begin>
				<Var name="groups">
					<DataAccess method="getAll">
						<Param name="_entity">fw_person_group</Param>
						<Param name="is_active">1</Param>
					</DataAccess>
				</Var>
				
				<Return>
					<Var name="groups"/>
				</Return>
			</Begin>
		</Function>
		
		
		<Function name="update" scope="public" doc="Update a person group">
				<Params>
						<Param name="id" required="true"/>
						<Param name="id_person_group_type"/>
						<Param name="master_designation"/>
						<Param name="name"/>
						<Param name="name_communication"/>
						<Param name="code"/>
						<Param name="uid"/>
						<Param name="is_active"/>
						<Param name="is_collaborative"/>
						<Param name="_is_system"/>
				</Params>
				<Return type="single"/>
				<Begin>
						<!-- Get the record -->
						<Var name="record">
								<Call function="getById">
										<Param name="id">
												<Var name="PARAMS" key="id"/>
										</Param>
								</Call>
						</Var>
						<!-- Update the record -->
						<Var name="dataParams">
								<UtilsLib method="filterNotNull">
										<Param><Var name="PARAMS" /></Param>
								</UtilsLib>
						</Var>
						<DataAccess method="update" params="dataParams">
								<Param name="_entity">fw_person_group</Param>
								<Param name="id"><Var name="PARAMS" key="id"/></Param>
								<Param name="_base">true</Param>
						</DataAccess>
						<!-- Get the updated record -->
						<Var name="updatedRecord">
								<Call function="getById">
										<Param name="id">
												<Var name="PARAMS" key="id"/>
										</Param>
								</Call>
						</Var>
						<!-- Log this action, if the record existed -->
						<If condition="$updatedRecord != '' &amp;&amp; $updatedRecord != null">
								<Then>
										<Var name="records"><Set/></Var>
										<Var name="records" key=""><Var name="record"/></Var>
										<Var name="records" key=""><Var name="updatedRecord"/></Var>
										<Call library="framework,log,api" function="add">
												<Param name="type">framework,fw.person.group,api</Param>
												<Param name="action">update</Param>
												<Param name="log_key"><Var name="record" key="id"/></Param>
												<Param name="context_data">
														<UtilsLib method="jsonEncode">
																<Param><Var name="records"/></Param>
														</UtilsLib>
												</Param>
												<Param name="message">
														<Lang key="logPersonGroupUpdate">
																<Param><Var name="updatedRecord" key="id"/></Param>
														</Lang>
												</Param>
										</Call>
								</Then>
						</If>
						<Return>
								<Var name="updatedRecord"/>
						</Return>
				</Begin>
		</Function>
		
		
		<Function name="delete" scope="public" doc="Delete a person group">
				<Params>
						<Param name="id" required="true"/>
				</Params>
				<Return type="int"/>
				<Begin>
						<!-- Get the record -->
						<Var name="record">
								<Call function="getById">
										<Param name="id">
												<Var name="PARAMS" key="id"/>
										</Param>
								</Call>
						</Var>
						<!-- Delete the record -->
						<Var name="deleted">
								<DataAccess method="delete">
										<Param name="_entity">fw_person_group</Param>
										<Param name="id"><Var name="PARAMS" key="id"/></Param>
								</DataAccess>
						</Var>
						<!-- Log this action, if the record existed -->
						<If condition="$record != '' &amp;&amp; $record != null">
								<Then>
										<Call library="framework,log,api" function="add">
												<Param name="type">framework,fw.person.group,api</Param>
												<Param name="action">delete</Param>
												<Param name="log_key"><Var name="record" key="id"/></Param>
												<Param name="context_data">
														<UtilsLib method="jsonEncode">
																<Param><Var name="record"/></Param>
														</UtilsLib>
												</Param>
												<Param name="message">
														<Lang key="logPersonGroupDelete">
																<Param><Var name="record" key="id"/></Param>
														</Lang>
												</Param>
										</Call>
								</Then>
						</If>
						<Return>
								<If condition="$deleted == 1">
										<Then>1</Then>
										<Else>0</Else>
								</If>
						</Return>
				</Begin>
		</Function>
		
		
		<Function name="getByIdGroupType" scope="public" doc="Get all groups of a type">
				<Params>
						<Param name="id_group_type"/>
						<Param name="is_active"/>
				</Params>
				<Return type="multiple"/>
				<Begin>
						<Return>
								<DataAccess method="this,this,getPersonGroupsByGroupType">
										<Param name="id_person_group_type"><Var name="PARAMS" key="id_group_type"/></Param>
										<Param name="is_active"><Var name="PARAMS" key="is_active"/></Param>
								</DataAccess>
						</Return>
				</Begin>
		</Function>

		<Function name="getPersonRelGroupPaginated" scope="public" doc="Get all relations between persons and groups paginated">
			<Params>
				<Param name="id_person_group"/>
				<Param name="id_person"/>
				<Param name="pagenum" type="int"/>
				<Param name="pagesize" type="int"/>
			</Params>
			<Return type="multiple"/>
			<Begin>
				<Var name="result">
					<DataAccess method="this,this,getPersonRelGroupPaginated">
						<Param name="id_person_group">
							<Var name="PARAMS" key="id_person_group"/>
						</Param>
						<Param name="id_person">
							<Var name="PARAMS" key="id_person"/>
						</Param>
						<Param name="pagenum">
							<Var name="PARAMS" key="pagenum"/>
						</Param>
						<Param name="pagesize">
							<Var name="PARAMS" key="pagesize"/>
						</Param>
					</DataAccess>
				</Var>
				<Return>
					<Var name="result"/>
				</Return>
			</Begin>
		</Function>

		<Function name="getAllPersonRelGroup" scope="public" doc="Get all relations between persons and groups">
			<Params/>
			<Return type="multiple"/>
			<Begin>
				<Var name="result">
					<DataAccess method="this,this,getAllPersonRelGroup"/>
				</Var>
				<Return>
					<Var name="result"/>
				</Return>
			</Begin>
		</Function>

		<Function name="insertPersonRelGroup" scope="public" doc="Insert person relation group">
			<Params>
				<Param name="id_person"/>
				<Param name="id_person_group"/>
				<Param name="is_owner"/>
										<Param name="is_master"/>
										<Param name="is_main"/>
										<Param name="is_member"/>
			</Params>
			<Return type="multiple"/>
			<Begin>
										<!--
												If there isn't a correspondant main group to this person,
												In this relation to add it will be main.
										-->
										<Var name="mainPersonRelGroups" dump="true">
												<Call function="getMainRelGroupByPerson">
														<Param name="id_person">
																<Var name="PARAMS" key="id_person"/>
														</Param>
												</Call>
										</Var>
										<If condition="$mainPersonRelGroups->__length == 0">
												<Then>
														<Var name="PARAMS" key="is_main">1</Var>
												</Then>
										</If>
										<!-- Create new record -->
				<Var name="newId">
					<DataAccess method="insert">
						<Param name="_entity">fw_person_rel_group</Param>
						<Param name="id_person"><Var name="PARAMS" key="id_person"/></Param>
						<Param name="id_person_group"><Var name="PARAMS" key="id_person_group"/></Param>
														<Param name="is_owner"><Var name="PARAMS" key="is_owner"/></Param>
														<Param name="is_master"><Var name="PARAMS" key="is_master"/></Param>
														<Param name="is_main"><Var name="PARAMS" key="is_main"/></Param>
														<Param name="is_member"><Var name="PARAMS" key="is_member"/></Param>
														<Param name="_base">true</Param>
					</DataAccess>
										</Var>
										<!-- Get the record created -->
										<Var name="record">
												<Call function="getPersonRelGroup">
														<Param name="id">
																<Var name="newId"/>
														</Param>
												</Call>
										</Var>
										<!-- Log this action -->
										<Call library="framework,log,api" function="add">
												<Param name="type">framework,fw.person.group,api</Param>
												<Param name="action">insert</Param>
												<Param name="log_key"><Var name="record" key="id"/></Param>
												<Param name="context_data">
														<UtilsLib method="jsonEncode">
																<Param><Var name="record"/></Param>
														</UtilsLib>
												</Param>
												<Param name="message">
														<Lang key="logPersonRelGroupInsert">
																<Param><Var name="record" key="id"/></Param>
														</Lang>
												</Param>
										</Call>
				<Return>
					<Var name="newId"/>
				</Return>
			</Begin>
		</Function>
		
		<Function name="updatePersonRelGroup" scope="public" doc="Update person relation group">
			<Params>
				<Param name="id"/>
				<Param name="id_person"/>
				<Param name="id_person_group"/>
				<Param name="is_master"/>
				<Param name="id_company"/>
			</Params>
			<Return type="multiple"/>
			<Begin>
										<!-- Get the record -->
										<Var name="record">
												<Call function="getPersonRelGroup">
														<Param name="id">
																<Var name="PARAMS" key="id"/>
														</Param>
												</Call>
										</Var>
										<!--
												If in the updated record, corresponds to the person main group,
												we have to ensure that the person is not main in relations with any other group
										-->
										<If condition="$PARAMS->is_main=='1'">
												<Then>
														<Var name="mainPersonRelGroups" dump="true">
																<Call function="getMainRelGroupByPerson">
																		<Param name="id_person">
																				<Var name="record" key="id_person"/>
																		</Param>
																</Call>
														</Var>
														<ForEach var="mainPersonRelGroups" item="mainPersonRelGroup">
																<Call function="updatePersonRelGroup">
																		<Param name="id"><Var name="mainPersonRelGroup" key="id"/></Param>
																		<Param name="is_main">0</Param>
																</Call>
														</ForEach>
												</Then>
										</If>
										<!-- Update the record -->
										<Var name="dataParams">
												<UtilsLib method="filterNotNull">
														<Param><Var name="PARAMS"/></Param>
												</UtilsLib>
										</Var>
				<Var name="result">
					<DataAccess method="update" params="dataParams">
						<Param name="_entity">fw_person_rel_group</Param>
						<Param name="id"><Var name="PARAMS" key="id"/></Param>
						<Param name="_base">true</Param>
					</DataAccess>
				</Var>
										<!-- Get the updated record -->
										<Var name="updatedRecord">
												<Call function="getPersonRelGroup">
														<Param name="id">
																<Var name="PARAMS" key="id"/>
														</Param>
												</Call>
										</Var>
										<!-- Log this action, if the record existed -->
										<If condition="$updatedRecord != '' &amp;&amp; $updatedRecord != null">
												<Then>
														<Var name="records"><Set/></Var>
														<Var name="records" key=""><Var name="record"/></Var>
														<Var name="records" key=""><Var name="updatedRecord"/></Var>
														<Call library="framework,log,api" function="add">
																<Param name="type">framework,fw.person.group,api</Param>
																<Param name="action">update</Param>
																<Param name="log_key"><Var name="record" key="id"/></Param>
																<Param name="context_data">
																		<UtilsLib method="jsonEncode">
																				<Param><Var name="records"/></Param>
																		</UtilsLib>
																</Param>
																<Param name="message">
																		<Lang key="logPersonRelGroupUpdate">
																				<Param><Var name="updatedRecord" key="id"/></Param>
																		</Lang>
																</Param>
														</Call>
												</Then>
										</If>

				<Return>
					<Var name="updatedRecord"/>
				</Return>
			</Begin>
		</Function>

		<Function name="getPersonRelGroup" scope="public" doc="Get relation between person and group">
			<Params>
				<Param name="id"/>
			</Params>
			<Return type="multiple"/>
			<Begin>
				<Var name="result">
					<DataAccess method="load">
						<Param name="_entity">fw_person_rel_group</Param>
						<Param name="id"><Var name="PARAMS" key="id"/></Param>
					</DataAccess>
				</Var>
				<Return>
					<Var name="result"/>
				</Return>
			</Begin>
		</Function>

		<Function name="getMainRelGroupByPerson" scope="public" doc="Get by person id relation between person and group in which person is main">
			<Params>
				<Param name="id_person"/>
			</Params>
			<Return type="multiple"/>
			<Begin>
				<Var name="result">
					<DataAccess method="getAll">
						<Param name="_entity">fw_person_rel_group</Param>
						<Param name="id_person"><Var name="PARAMS" key="id_person"/></Param>
														<Param name="is_main">1</Param>
					</DataAccess>
				</Var>
				<Return>
					<Var name="result"/>
				</Return>
			</Begin>
		</Function>

		<Function name="getPersonAllRelGroups" scope="public" doc="Get all relations between person and group of this person">
			<Params>
				<Param name="id_person"/>
			</Params>
			<Return type="multiple"/>
			<Begin>
				<Var name="result">
					<DataAccess method="getAll">
						<Param name="_entity">fw_person_rel_group</Param>
						<Param name="id_person"><Var name="PARAMS" key="id_person"/></Param>
					</DataAccess>
				</Var>
				<Return>
					<Var name="result"/>
				</Return>
			</Begin>
		</Function>

		<Function name="search" doc="Search records from table fw_person_group">
				<Params>
						<Param name="pagenum" type="int" required="false"/>
						<Param name="pagesize" type="int" required="false"/>
						<Param name="search_keywords" type="string" required="false"/>
						<Param name="id_person_group_type" type="int" required="false"/>
						<Param name="is_active" type="int" required="false"/>
				</Params>
				<Return type="multiple" doc=""/>
				<Begin>
						<Return>
								<DataAccess method="this,this,search">
										<Param name="_pageNum">
												<Var name="PARAMS" key="pagenum"/>
										</Param>
										<Param name="_pageSize">
												<Var name="PARAMS" key="pagesize"/>
										</Param>
										<Param name="search_keywords" wildcard="fullSplit">
												<Var name="PARAMS" key="search_keywords"/>
										</Param>
										<Param name="id_person_group_type">
												<Var name="PARAMS" key="id_person_group_type"/>
										</Param>
										<Param name="is_active">
												<Var name="PARAMS" key="is_active"/>
										</Param>
								</DataAccess>
						</Return>
				</Begin>
		</Function>

		<!-- **************************************************************************** -->
		<!--
			Handle persons in person groups
		-->
		<Function name="enrollPerson" scope="public" doc="Add a person into a group">
				<Params>
						<Param name="id_person"/>
						<Param name="id_person_group"/>
						<Param name="is_owner"/>
						<Param name="is_master"/>
						<Param name="is_main"/>
						<Param name="is_member"/>
						<Param name="communication_order"/>
				</Params>
				<Return type="single" doc=""/>
				<Errors>
						<Error code="-1" doc="The person already have a relation with the group."/>
				</Errors>
				<Begin>
						<Var name="exists">
								<Call function="isEnrolled">
										<Param name="id_person"><Var name="PARAMS" key="id_person"/></Param>
										<Param name="id_person_group"><Var name="PARAMS" key="id_person_group"/></Param>
								</Call>
						</Var>
						<Var name="returnValue">0</Var>
						<If condition="$exists == 0">
								<Then>
										<!--
												If there isn't a correspondant main group to this person,
												In this relation to add it will be main.
										-->
										<Var name="mainPersonRelGroups" dump="true">
												<Call function="getMainRelGroupByPerson">
														<Param name="id_person">
																<Var name="PARAMS" key="id_person"/>
														</Param>
												</Call>
										</Var>
										<If condition="$mainPersonRelGroups->__length == 0">
												<Then>
														<Var name="PARAMS" key="is_main">1</Var>
												</Then>
										</If>
										<!-- Create new record -->
										<Var name="newId">
												<DataAccess method="insert">
														<Param name="_entity">fw_person_rel_group</Param>
						<Param name="id_person"><Var name="PARAMS" key="id_person"/></Param>
						<Param name="id_person_group"><Var name="PARAMS" key="id_person_group"/></Param>
														<Param name="is_owner"><Var name="PARAMS" key="is_owner"/></Param>
														<Param name="is_master"><Var name="PARAMS" key="is_master"/></Param>
														<Param name="is_main"><Var name="PARAMS" key="is_main"/></Param>
														<Param name="is_member"><Var name="PARAMS" key="is_member"/></Param>
														<Param name="communication_order"><Var name="PARAMS" key="communication_order"/></Param>
														<Param name="_base">true</Param>
												</DataAccess>
										</Var>
										<Var name="returnValue">
												<Call function="getEnroll">
														<Param name="id"><Var name="newId"/></Param>
												</Call>
										</Var>
										<!-- Get the record created -->
										<Var name="record">
												<Call function="getPersonRelGroup">
														<Param name="id">
																<Var name="newId"/>
														</Param>
												</Call>
										</Var>
										<!-- Log this action -->
										<Call library="framework,log,api" function="add">
												<Param name="type">framework,fw.person.group,api</Param>
												<Param name="action">insert</Param>
												<Param name="log_key"><Var name="record" key="id"/></Param>
												<Param name="context_data">
														<UtilsLib method="jsonEncode">
																<Param><Var name="record"/></Param>
														</UtilsLib>
												</Param>
												<Param name="message">
														<Lang key="logPersonRelGroupInsert">
																<Param><Var name="record" key="id"/></Param>
														</Lang>
												</Param>
										</Call>
								</Then>
								<Else>
										<Var name="returnValue">-1</Var>
								</Else>
						</If>
						<Return>
								<Var name="returnValue"/>
						</Return>
				</Begin>
		</Function>
		
		<Function name="unEnrollPerson" scope="public" doc="Remove the person enroll">
				<Params>
						<Param name="id"/>
						<Param name="id_person"/>
						<Param name="id_person_group"/>
				</Params>
				<Return type="int"/>
				<Errors>
						<Error code="-1" doc="In the relation between the person and the group, person is main and there is other relations envolving this person."/>
				</Errors>
				<Begin>
						<Var name="enroll">
								<Call function="getEnroll" params="PARAMS"/>
						</Var>
						<Var name="returnValue">0</Var>
						<If condition="$enroll->id &gt; 0">
								<Then>
										<!-- Get the record -->
										<Var name="record" dump="true">
												<Call function="getPersonRelGroup">
														<Param name="id">
																<Var name="enroll" key="id"/>
														</Param>
												</Call>
										</Var>

										<Var name="enrolls" dump="true">            
												<Call function="getPersonAllRelGroups">
														<Param name="id_person">
																<Var name="record" key="id_person"/>
														</Param>
												</Call>
										</Var>

										<If condition="$record->is_main &amp;&amp; $enrolls->__length != '1'">
												<Then>
														<Var name="returnValue">-1</Var>
												</Then>
												<Else>
														<!-- Delete the record -->
														<Var name="returnValue">
																<DataAccess method="delete">
																		<Param name="_entity">fw_person_rel_group</Param>
																		<Param name="id"><Var name="enroll" key="id"/></Param>
																</DataAccess>
														</Var>
														<!-- Log this action, if the record existed -->
														<If condition="$record != '' &amp;&amp; $record != null">
																<Then>
																		<Call library="framework,log,api" function="add">
																				<Param name="type">framework,fw.person.group,api</Param>
																				<Param name="action">delete</Param>
																				<Param name="log_key"><Var name="record" key="id"/></Param>
																				<Param name="context_data">
																						<UtilsLib method="jsonEncode">
																								<Param><Var name="record"/></Param>
																						</UtilsLib>
																				</Param>
																				<Param name="message">
																						<Lang key="logPersonRelGroupDelete">
																								<Param><Var name="record" key="id"/></Param>
																						</Lang>
																				</Param>
																		</Call>
																</Then>
														</If>
												</Else>
										</If>
								</Then>
						</If>
						<Return><Var name="returnValue"/></Return>
				</Begin>
		</Function>

		<Function name="unEnrollPersonFromAllGroups" scope="public" doc="Remove the person enroll in all groups by group type">
			<Params>
				<Param name="group_type_code"/>
				<Param name="id_person"/>
			</Params>
			<Return type="int"/>
			<Begin>
				<Var name="groupType">
					<DataAccess method="load">
						<Param name="_entity">fw_person_group_type</Param>
						<Param name="code"><Var name="PARAMS" key="group_type_code"/></Param>
					</DataAccess>
				</Var>
				<Exception name="framework/fw.person.group.type::notExist" condition="$groupType->__length == 0"/>
				<Var name="enrolls" dump="true">            
					<DataAccess method="this,this,getPersonGroupsByGroupType">
						<Param name="id_person_group_type"><Var name="groupType" key="id"/></Param>
						<Param name="id_person"><Var name="PARAMS" key="id_person"/></Param>
					</DataAccess>
				</Var>
				<ForEach var="enrolls" item="enroll">
						<!-- Get the record -->
						<Var name="record">
								<Call function="getPersonRelGroup">
										<Param name="id">
												<Var name="enroll" key="id_person_rel_group"/>
										</Param>
								</Call>
						</Var>
						<!-- Delete the record -->
						<DataAccess method="delete">
								<Param name="_entity">fw_person_rel_group</Param>
								<Param name="id"><Var name="enroll" key="id_person_rel_group"/></Param>
						</DataAccess>
						<!-- Log this action, if the record existed -->
						<If condition="$record != '' &amp;&amp; $record != null">
								<Then>
										<Call library="framework,log,api" function="add">
												<Param name="type">framework,fw.person.group,api</Param>
												<Param name="action">delete</Param>
												<Param name="log_key"><Var name="record" key="id"/></Param>
												<Param name="context_data">
														<UtilsLib method="jsonEncode">
																<Param><Var name="record"/></Param>
														</UtilsLib>
												</Param>
												<Param name="message">
														<Lang key="logPersonRelGroupDelete">
																<Param><Var name="record" key="id"/></Param>
														</Lang>
												</Param>
										</Call>
								</Then>
						</If>
				</ForEach>
				<Return><Int>0</Int></Return>
			</Begin>
		</Function>
		
		<Function scope="public" name="getEnrolledPersons" doc="Get all enrolled persons in this group">
				<Params>
						<Param name="id_person_group"/>
				</Params>
				<Return type="multiple" doc="">
						<External name="id" type="text" doc=""/>
						<External name="display_name" type="text" doc=""/>
						<External name="public_key" type="text" doc=""/>
						<External name="id_card" type="text" doc=""/>
						<External name="_person_type_description" type="text" doc=""/>
						<External name="is_master" type="text" doc=""/>
						<External name="person_group_name" type="text" doc=""/>
						<External name="person_group_code" type="text" doc=""/>
						<External name="master_designation" type="text" doc=""/>
						<External name="id_person_group_type" type="text" doc=""/>
						<External name="person_group_type_name" type="text" doc=""/>
						<External name="person_group_type_code" type="text" doc=""/>
				</Return>
				<Begin>
						<Return>
								<DataAccess method="this,this,getEnrolledPersons">
										<Param name="id_person_group"><Var name="PARAMS" key="id_person_group"/></Param>
										<Param name="is_owner"><Var name="PARAMS" key="is_owner"/></Param>
										<Param name="is_master"><Var name="PARAMS" key="is_master"/></Param>
										<Param name="is_member"><Var name="PARAMS" key="is_member"/></Param>
								</DataAccess>
						</Return>
				</Begin>
		</Function>

		<Function scope="public" name="getEnrolledPersonsByCode" doc="Get all enrolled persons in this group">
				<Params>
						<Param name="person_group_code"/>
				</Params>
				<Return type="multiple" doc="">
						<External name="id" type="text" doc=""/>
						<External name="display_name" type="text" doc=""/>
						<External name="public_key" type="text" doc=""/>
						<External name="id_card" type="text" doc=""/>
						<External name="_person_type_description" type="text" doc=""/>
						<External name="is_master" type="text" doc=""/>
						<External name="person_group_name" type="text" doc=""/>
						<External name="person_group_code" type="text" doc=""/>
						<External name="master_designation" type="text" doc=""/>
						<External name="id_person_group_type" type="text" doc=""/>
						<External name="person_group_type_name" type="text" doc=""/>
						<External name="person_group_type_code" type="text" doc=""/>
				</Return>
				<Begin>
						<Return>
								<DataAccess method="this,this,getEnrolledPersons">
										<Param name="person_group_code"><Var name="PARAMS" key="person_group_code"/></Param>
								</DataAccess>
						</Return>
				</Begin>
		</Function>

		<Function name="getEnroll" scope="public" doc="Get a person enroll record">
				<Params>
						<Param name="id"/>
						<Param name="id_person"/>
						<Param name="id_person_group"/>
				</Params>
				<Return type="single" doc="">
						<External name="id" type="text" doc=""/>
						<External name="id_person" type="text" doc=""/>
						<External name="id_person_group" type="text" doc=""/>
						<External name="is_master" type="text" doc=""/>
						<External name="_creation" type="text" doc=""/>
						<External name="_modification" type="text" doc=""/>
						<External name="_creation_ip" type="text" doc=""/>
						<External name="_modification_ip" type="text" doc=""/>
				</Return>
				<Begin>
						<Return>
								<DataAccess method="load" params="PARAMS">
										<Param name="_entity">fw_person_rel_group</Param>
								</DataAccess>
						</Return>
				</Begin>
		</Function>

		<Function name="getAllEnrollInGroupsFormatted" scope="public" doc="Get person all enroll in groups">
				<Params>
						<Param name="id_person"/>
				</Params>
				<Return type="single" doc=""/>
				<Begin>
						<Return>
								<DataAccess method="this,this,getAllEnrollInGroupsFormatted">
										<Param name="id_person"><Var name="PARAMS" key="id_person"/></Param>
								</DataAccess>
						</Return>
				</Begin>
		</Function>

		<Function name="isEnrolled" scope="public" doc="Check if a person is enrolled in group">
				<Params>
						<Param name="id_person"/>
						<Param name="id_person_group"/>
				</Params>
				<Return type="int"/>
				<Begin>
						<Var name="exists" >
								<Call function="getEnroll" params="PARAMS" />
						</Var>
						<Return>
								<If condition="$exists->id &gt; 0">
										<Then>1</Then>
										<Else>0</Else>
								</If>
						</Return>
				</Begin>
		</Function>

		<Function name="isMember" scope="public" doc="Check if a person is member of group">
				<Params>
						<Param name="id_person"/>
						<Param name="id_person_group"/>
				</Params>
				<Return type="int"/>
				<Begin>
						<Var name="PARAMS" key="is_member">1</Var>
						<Var name="exists" >
								<Call function="getEnroll" params="PARAMS" />
						</Var>
						<Return>
								<If condition="$exists->id &gt; 0">
										<Then>1</Then>
										<Else>0</Else>
								</If>
						</Return>
				</Begin>
		</Function>

		<Function name="isOwner" scope="public" doc="Check if a person is owner of group">
				<Params>
						<Param name="id_person"/>
						<Param name="id_person_group"/>
				</Params>
				<Return type="int"/>
				<Begin>
						<Var name="PARAMS" key="is_owner">1</Var>
						<Var name="exists" >
								<Call function="getEnroll" params="PARAMS" />
						</Var>
						<Return>
								<If condition="$exists->id &gt; 0">
										<Then>1</Then>
										<Else>0</Else>
								</If>
						</Return>
				</Begin>
		</Function>

		<Function name="isEnrolledByCode" scope="public" doc="Check if a person is enrolled in group">
				<Params>
						<Param name="id_person"/>
						<Param name="person_group_code"/>
				</Params>
				<Return type="int"/>
				<Begin>
						<Var name="idGroup">
							<Call function="getIdByCode">
								<Param name="code"><Var name="PARAMS" key="person_group_code"/></Param>
							</Call>
						</Var>

						<If condition="$idGroup == ''">
							<Then>
								<Var name="exists"><Set/></Var>
							</Then>
							<Else>
								<Var name="exists">
										<Call function="getEnroll">
											<Param name="id_person"><Var name="PARAMS" key="id_person"/></Param>
											<Param name="id_person_group"><Var name="idGroup"/></Param>
										</Call>
								</Var>
							</Else>
						</If>
						<Return>
								<If condition="$exists->id &gt; 0">
										<Then>1</Then>
										<Else>0</Else>
								</If>
						</Return>
				</Begin>
		</Function>

		<Function name="isMaster" scope="public" doc="Check if a person is master in group or not">
				<Params>
						<Param name="id_person"/>
						<Param name="id_person_group"/>
				</Params>
				<Return type="int" doc="1 if is master. 0 if isn't master. -1 if enroll not exists"/>
				<Begin>
						<Var name="enroll">
								<Call function="getEnroll">
										<Param name="id_person"><Var name="PARAMS" key="id_person"/></Param>
										<Param name="id_person_group"><Var name="PARAMS" key="id_person_group"/></Param>
								</Call>
						</Var>
						<Return>
								<If condition="$enroll->id &gt; 0">
										<Then><Var name="enroll" key="is_master"/></Then>
										<Else>-1</Else>
								</If>
						</Return>
				</Begin>
		</Function>
		
		<Function name="getGroup" scope="public" doc="Given a person, find out which group is master. Assuming that one person only belongs to a one group">
				<Params>
						<Param name="id_person"/>
						<Param name="is_master"/>
						<Param name="person_group_type_code"/>
				</Params>
				<Return type="single"/>
				<Begin>
						<Var name="masterPerson" >
								<DataAccess method="this,this,getPersonRelGroup">
										<Param name="id_person"><Var name="PARAMS" key="id_person"/></Param>
										<Param name="is_master"><Var name="PARAMS" key="is_master"/></Param>
										<Param name="person_group_type_code"><Var name="PARAMS" key="person_group_type_code"/></Param>
								</DataAccess>
						</Var>
						<Return>
								<If condition="$masterPerson->id &gt; 0">
										<Then>
												<Call function="get"><Param name="id"><Var name="masterPerson" key="id_person_group"/></Param></Call>
										</Then>
										<Else></Else>
								</If>
						</Return>
				</Begin>
		</Function>
	</Library>
</Node>
