<?xml version="1.1" encoding="UTF-8"?>
<Node>
	<Doc>
		<Description><![CDATA[ Microsoft API  ::  Allows the communication with the Microsoft system. ]]></Description>
	</Doc>
	<Permissions/>
	<Configuration>
		<Config key="uuid_datasource" value="119f7ac0-90b8-4bb3-a93c-ab9d34116bb5"/>
	</Configuration>
	<Libraries/>
	<Screens/>
	<Actions/>
	<Library>
		<!--	________________________________________________________________________________________________
			*
			*			P E R S O N S
			*		________________________________________________________________________________________________
		-->
		<!--
			*		addPerson  |  Creates a new person. 
			*  
			*		PARAMS
			*    - (string) uid		 				 	 ::  Person uid;
			*    - (string) given_name	 		 ::  Person given name;
			*    - (string) surname	 				 ::  Person surname;
			*    - (string) display_name	 	 ::  Person display name;
			*    - (string) mobile	 	 			 ::  Person mobile phone number;
			*    - (string) job_title	 			 ::  Person job title;
			*    - (string) office_location	 ::	 Person office location.
			*
			*		RETURN
			*	   - (int) 0 | 1  ::  Returns 0 if the person was successfully created. Otherwise, returns 1. 
		-->
		<Function name="addPerson" doc="Creates a new person.">
			<Params>
				<Param name="uid" type="string" required="true" doc="Person uid"/>
				<Param name="given_name" type="string" required="true" doc="Person given name"/>			
				<Param name="surname" type="string" required="true" doc="Person surname"/>
				<Param name="display_name" type="string" required="false" doc="Person display name"/>
				<Param name="mobile" type="string" required="false" doc="Person mobile phone number"/>
				<Param name="job_title" type="string" required="false" doc="Person job title"/>
				<Param name="office_location" type="string" required="false" doc="Person office location"/>
			</Params>
			<Return type="int" doc="0 if the person was successfully created; 1, otherwise."/>

			<Begin>
				<Var name="params">
					<UtilsLib method="filterNotNull">
						<Param><Var name="PARAMS"/></Param>
					</UtilsLib>
				</Var>
				<Var name="person">
					<DataAccess method="insert" datasource="microsoftAPIAdminSDK" params="params">
						<Param name="_entity">user</Param>
						<Param name="uid"><Var name="PARAMS" key="uid"/></Param>
						<Param name="password">kjlk7yhjqt534ewrrjkrwe</Param>
						<Param name="age_group">adult</Param>
					</DataAccess>
				</Var>
				
				<Return>
					<Var name="person"/>
				</Return>
			</Begin>
		</Function>


		<!--
			*		activatePerson  |  Activates a person. 
			*  
			*		PARAMS
			*    - (string) id   ::  Person id;
			*    - (string) uid  ::  Person uid.
			*
			*		RETURN
			*	   - (int) 0 | 1  ::  Returns 0 if the person was successfully reactived. Otherwise, returns 1. 
		-->
		<Function name="activatePerson" doc="Activates a person.">
			<Params>
				<Param name="id" type="string" required="false" doc="Person id"/>
				<Param name="uid" type="string" required="false" doc="Person uid"/>
			</Params>
			<Return type="int" doc="0 if the person was successfully reactivated; 1, otherwise."/>

			<Begin>
				<Var name="result">
					<DataAccess method="update" datasource="microsoftAPIAdminSDK">
						<Param name="_entity">user</Param>
						<Param name="id"><Var name="PARAMS" key="id"/></Param>
						<Param name="uid"><Var name="PARAMS" key="uid"/></Param>
						<Param name="account_enabled">true</Param>
					</DataAccess>
				</Var>
				
				<Return>
					<Var name="result"/>
				</Return>
			</Begin>
		</Function>


		<!--
			*		deletePerson  |  Deletes a person. 
			*  
			*		PARAMS
			*    - (string) id   ::  Person id;
			*    - (string) uid  ::  Person uid.
			*
			*		RETURN
			*	   - (int) 0 | 1  ::  Returns 0 if the person was successfully deleted. Otherwise, returns 1. 
		-->
		<Function name="deletePerson" doc="Deletes a person.">
			<Params>
				<Param name="id" type="string" required="false" doc="Person id"/>
				<Param name="uid" type="string" required="false" doc="Person uid"/>
			</Params>
			<Return type="int" doc="0 if the person was successfully deleted; 1, otherwise."/>

			<Begin>
				<Var name="result">
					<DataAccess method="delete" datasource="microsoftAPIAdminSDK">
						<Param name="_entity">user</Param>
						<Param name="id"><Var name="PARAMS" key="id"/></Param>
						<Param name="uid"><Var name="PARAMS" key="uid"/></Param>
					</DataAccess>
				</Var>
				
				<Return>
					<Var name="result"/>
				</Return>
			</Begin>
		</Function>


		<!--
			*		getAllPeople  |  Gets a list of all the existing people. 
			*  
			*		PARAMS
			*    - (string) attributes  ::  Person attributes to get (separated by a comma).
			*																Example: id,mail,givenName,surname,displayName
			*
			*		RETURN
			*	   - (multiple) person  ::  Returns all of 'person' (user) records. 
		-->
		<Function name="getAllPeople" doc="Gets a list of all the existing people.">
			<Params>
				<Param name="_attributes" type="string" required="false" doc="Person attributes to get (separated by a comma)"/>
 			</Params>
			<Return type="multiple" doc="All of 'person' (user) records."/>

			<Begin>
				<Var name="people">
					<DataAccess method="getAll" datasource="microsoftAPIAdminSDK">
						<Param name="_entity">user</Param>
						<Param name="_attributes"><Var name="PARAMS" key="_attributes"/></Param>
					</DataAccess>
				</Var>
				
				<Return>
					<Var name="people"/>
				</Return>
			</Begin>
		</Function>


		<!--
			*		getPerson  |  Gets a person given its uid. 
			*  
			*		PARAMS
			*    - (string) id   				::  Person id;
			*    - (string) uid  				::  Person uid;
			*    - (string) attributes  ::  Person attributes to get (separated by a comma).
			*
			*		RETURN
			*	   - (single) person  ::  Returns the corresponding 'person' (user) record. 
		-->
		<Function name="getPerson" doc="Gets a person given its uid.">
			<Params>
				<Param name="id" type="string" required="false" doc="Person id"/>
				<Param name="uid" type="string" required="false" doc="Person uid"/>
				<Param name="_attributes" type="string" required="false" doc="Person attributes to get (separated by a comma)"/>
			</Params>
			<Return type="single" doc="The corresponding 'person' (user) record."/>

			<Begin>
				<Var name="person">
					<DataAccess method="load" datasource="microsoftAPIAdminSDK">
						<Param name="_entity">user</Param>
						<Param name="id"><Var name="PARAMS" key="id"/></Param>
						<Param name="uid"><Var name="PARAMS" key="uid"/></Param>
						<Param name="_attributes"><Var name="PARAMS" key="_attributes"/></Param>
					</DataAccess>
				</Var>
				
				<Return>
					<Var name="person"/>
				</Return>
			</Begin>
		</Function>


		<!--
			*		inactivatePerson  |  Inactivates a person. 
			*  
			*		PARAMS
			*    - (string) id   ::  Person id;
			*    - (string) uid  ::  Person uid.
			*
			*		RETURN
			*	   - (int) 0 | 1  ::  Returns 0 if the person was successfully inactived. Otherwise, returns 1. 
		-->
		<Function name="inactivatePerson" doc="Inactivates a person.">
			<Params>
				<Param name="id" type="string" required="false" doc="Person id"/>
				<Param name="uid" type="string" required="false" doc="Person uid"/>
			</Params>
			<Return type="int" doc="0 if the person was successfully inactivated; 1, otherwise."/>

			<Begin>
				<Var name="result">
					<DataAccess method="update" datasource="microsoftAPIAdminSDK">
						<Param name="_entity">user</Param>
						<Param name="id"><Var name="PARAMS" key="id"/></Param>
						<Param name="uid"><Var name="PARAMS" key="uid"/></Param>
						<Param name="account_enabled">false</Param>
					</DataAccess>
				</Var>
				
				<Return>
					<Var name="result"/>
				</Return>
			</Begin>
		</Function>


		<!--
			*		updatePerson  |  Updates a person. 
			*  
			*		PARAMS
			*    - (string) id		 				 	 ::  Person id;
			*    - (string) uid		 				 	 ::  Person uid;
			*    - (string) given_name	 		 ::  Person given name;
			*    - (string) surname	 				 ::  Person surname;
			*    - (string) display_name	 	 ::  Person display name;
			*    - (string) mobile	 	 			 ::  Person mobile phone number;
			*    - (string) job_title	 			 ::  Person job title;
			*    - (string) office_location	 ::  Person office location.
			*
			*		RETURN
			*	   - (int) 0 | 1  ::  Returns 0 if the person was successfully updated. Otherwise, returns 1. 
		-->
		<Function name="updatePerson" doc="Updates a person.">
			<Params>
				<Param name="id" type="string" required="false" doc="Person id"/>
				<Param name="uid" type="string" required="false" doc="Person uid"/>
				<Param name="given_name" type="string" required="false" doc="Person given name"/>			
				<Param name="surname" type="string" required="false" doc="Person surname"/>
				<Param name="display_name" type="string" required="false" doc="Person display name"/>
				<Param name="mobile" type="string" required="false" doc="Person mobile phone number"/>
				<Param name="job_title" type="string" required="false" doc="Person job title"/>
				<Param name="office_location" type="string" required="false" doc="Person office location"/>
			</Params>
			<Return type="int" doc="0 if the person was successfully updated; 1, otherwise."/>

			<Begin>
				<Var name="params">
					<UtilsLib method="filterNotNull">
						<Param><Var name="PARAMS"/></Param>
					</UtilsLib>
				</Var>
				<Var name="result">
					<DataAccess method="update" datasource="microsoftAPIAdminSDK" params="params">
						<Param name="_entity">user</Param>
						<Param name="id"><Var name="PARAMS" key="id"/></Param>
						<Param name="uid"><Var name="PARAMS" key="uid"/></Param>
					</DataAccess>
				</Var>
				
				<Return>
					<Var name="result"/>
				</Return>
			</Begin>
		</Function>




		<!--	________________________________________________________________________________________________
			*
			*			G R O U P S
			*		________________________________________________________________________________________________
		-->
		<!--
			*		addGroup  |  Creates a new group. 
			*  
			*		PARAMS
			*    - (string) uid		 				 ::  Group uid;
			*    - (string) display_name	 ::  Group name;
			*    - (string) description		 ::  Group description;
			*    - (int) mail_enabled			 ::  1 if the group's mail will be enable; 0, otherwise;
			*    - (int) security_enabled  ::  1 if the group's security will be enable; 0, otherwise;
			*    - (string) uid_person  	 ::  Person uid;
			*    - (int) is_owner      		 ::  1 if the specified person is owner of the group; 0 (or NULL), otherwise.
			*
			*		RETURN
			*	   - (int) 0 | 1  ::  Returns the group itself if it was successfully created. Otherwise, returns 1. 
		-->
		<Function name="addGroup" doc="Creates a new group.">
			<Params>
				<Param name="uid" type="string" required="true" doc="Group uid"/>
				<Param name="display_name" type="string" required="true" doc="Group name"/>			
				<Param name="description" type="string" required="true" doc="Group description"/>
				<Param name="mail_enabled" type="int" required="true" doc="1 if the group's mail will be enable; 0, otherwise"/>
				<Param name="security_enabled" type="int" required="true" doc="1 if the group's security will be enable; 0, otherwise"/>
				<Param name="uid_person" type="string" required="true" doc="Person uid"/>
				<Param name="is_owner" type="int" required="true" doc="1 if the specified person is owner of the group; 0, otherwise"/>
			</Params>
			<Return type="int" doc="the group itself if it was successfully created; 1, otherwise."/>

			<Begin>
				<Var name="group">
					<DataAccess method="insert" datasource="microsoftAPIAdminSDK">
						<Param name="_entity">group</Param>
						<Param name="uid"><Var name="PARAMS" key="uid"/></Param>
						<Param name="display_name"><Var name="PARAMS" key="display_name"/></Param>
						<Param name="description"><Var name="PARAMS" key="description"/></Param>
						<Param name="mail_enabled"><Var name="PARAMS" key="mail_enabled"/></Param>
						<Param name="security_enabled"><Var name="PARAMS" key="security_enabled"/></Param>
						<Param name="uid_user"><Var name="PARAMS" key="uid_person"/></Param>
						<Param name="is_owner"><Var name="PARAMS" key="is_owner"/></Param>
						<Param name="is_collaborative">1</Param>						
					</DataAccess>
				</Var>
				
				<Return>
					<Var name="group"/>
				</Return>
			</Begin>
		</Function>


		<!--
			*		addPersonToGroup  |  Adds a person to a group. 
			*  
			*		PARAMS
			*    - (string) id_group  	::  Group id;
			*    - (string) uid_group  	::  Group uid;
			*    - (string) uid_person  ::  Person uid;
			*    - (int) is_owner      	::  1 if the person is owner of the group; 0 (or NULL) if is only a member.
			*
			*		RETURN
			*	   - (int) 0 | 1  ::  Returns 0 if the person was successfully added to the group. Otherwise, returns 1. 
		-->
		<Function name="addPersonToGroup" doc="Adds a person to a group.">
			<Params>
				<Param name="id_group" type="string" required="false" doc="Group id"/>
				<Param name="uid_group" type="string" required="false" doc="Group uid"/>
				<Param name="uid_person" type="string" required="true" doc="Person uid"/>
				<Param name="is_owner" type="int" required="false" doc="1 if the person is owner of the group; 0, otherwise"/>
			</Params>
			<Return type="int" doc="0 if the person was successfully added to the group; 1, otherwise."/>

			<Begin>
				<Var name="result">
					<DataAccess method="execute" datasource="microsoftAPIAdminSDK">
						<Param name="_entity">group</Param>
						<Param name="_method">addUser</Param>
						<Param name="id"><Var name="PARAMS" key="id_group"/></Param>
						<Param name="uid"><Var name="PARAMS" key="uid_group"/></Param>
						<Param name="uid_user"><Var name="PARAMS" key="uid_person"/></Param>
						<Param name="is_owner"><Var name="PARAMS" key="is_owner"/></Param>
					</DataAccess>
				</Var>
				
				<Return>
					<Var name="result"/>
				</Return>
			</Begin>
		</Function>


		<!--
			*		addGroupOwner  |  Adds a person as owner of a group. 
			*  
			*		PARAMS
			*    - (string) id_group  	::  Group id;
			*    - (string) uid_group  	::  Group uid;
			*    - (string) uid_person  ::  Person uid.
			*
			*		RETURN
			*	   - (int) 0 | 1  ::  Returns 0 if the person was successfully added as owner of the group. Otherwise, returns 1. 
		-->
		<Function name="addGroupOwner" doc="Adds a person as owner of a group.">
			<Params>
				<Param name="id_group" type="string" required="false" doc="Group id"/>
				<Param name="uid_group" type="string" required="false" doc="Group uid"/>
				<Param name="uid_person" type="string" required="true" doc="Person uid"/>
			</Params>
			<Return type="int" doc="0 if the person was successfully added as owner of the group; 1, otherwise."/>

			<Begin>
				<Var name="result">
					<DataAccess method="execute" datasource="microsoftAPIAdminSDK">
						<Param name="_entity">group</Param>
						<Param name="_method">addOwner</Param>
						<Param name="id"><Var name="PARAMS" key="id_group"/></Param>
						<Param name="uid"><Var name="PARAMS" key="uid_group"/></Param>
						<Param name="uid_user"><Var name="PARAMS" key="uid_person"/></Param>
					</DataAccess>
				</Var>
				
				<Return>
					<Var name="result"/>
				</Return>
			</Begin>
		</Function>


		<!--
			*		deleteGroup  |  Deletes a group. 
			*  
			*		PARAMS
			*    - (string) id   ::  Group id;
			*    - (string) uid  ::  Group uid.
			*
			*		RETURN
			*	   - (int) 0 | 1  ::  Returns 0 if the group was successfully deleted. Otherwise, returns 1. 
		-->
		<Function name="deleteGroup" doc="Deletes a group.">
			<Params>
				<Param name="id" type="string" required="false" doc="Group id"/>
				<Param name="uid" type="string" required="false" doc="Group uid"/>
			</Params>
			<Return type="int" doc="0 if the group was successfully deleted; 1, otherwise."/>

			<Begin>
				<Var name="result">
					<DataAccess method="delete" datasource="microsoftAPIAdminSDK">
						<Param name="_entity">group</Param>
						<Param name="id"><Var name="PARAMS" key="id"/></Param>
						<Param name="uid"><Var name="PARAMS" key="uid"/></Param>
					</DataAccess>
				</Var>
				
				<Return>
					<Var name="result"/>
				</Return>
			</Begin>
		</Function>


		<!--
			*		getGroup  |  Gets a group given its id or uid. 
			*  
			*		PARAMS
			*    - (string) id   				::  Group id;
			*    - (string) uid  				::  Group uid;
			*    - (string) attributes  ::  Group attributes to get (separated by a comma).
			*
			*		RETURN
			*	   - (single) group  ::  Returns the corresponding 'group' record. 
		-->
		<Function name="getGroup" doc="Gets a group given its id or uid.">
			<Params>
				<Param name="id" type="string" required="false" doc="Group id"/>
				<Param name="uid" type="string" required="false" doc="Group uid"/>
				<Param name="_attributes" type="string" required="false" doc="Group attributes to get (separated by a comma)"/>
			</Params>
			<Return type="single" doc="The corresponding 'group' record."/>

			<Begin>
				<Var name="group">
					<DataAccess method="load" datasource="microsoftAPIAdminSDK">
						<Param name="_entity">group</Param>
						<Param name="id"><Var name="PARAMS" key="id"/></Param>
						<Param name="uid"><Var name="PARAMS" key="uid"/></Param>
						<Param name="_attributes"><Var name="PARAMS" key="_attributes"/></Param>
					</DataAccess>
				</Var>
				
				<Return>
					<Var name="group"/>
				</Return>
			</Begin>
		</Function>


		<!--
			*		getAllGroups  |  Gets a list of all the existing groups. 
			*  
			*		PARAMS
			*    - (string) attributes  ::  Group attributes to get (separated by a comma).
			*
			*		RETURN
			*	   - (multiple) group  ::  Returns all of 'group' records. 
		-->
		<Function name="getAllGroups" doc="Gets a list of all the existing groups.">
			<Params>
				<Param name="_attributes" type="string" required="false" doc="Group attributes to get (separated by a comma)"/>
			</Params>
			<Return type="multiple" doc="All of 'group' records."/>

			<Begin>
				<Var name="groups">
					<DataAccess method="getAll" datasource="microsoftAPIAdminSDK">
						<Param name="_entity">group</Param>
						<Param name="_attributes"><Var name="PARAMS" key="_attributes"/></Param>
					</DataAccess>
				</Var>
				
				<Return>
					<Var name="groups"/>
				</Return>
			</Begin>
		</Function>


		<!--
			*		getGroupMembers  |  Gets a list of all the group members. 
			*  
			*		PARAMS
			*    - (string) id     ::  Group id;
			*    - (string) uid    ::  Group uid;
			*    - (int) is_owner  ::  1 to list the owners; 0 (or NULL) to list the members.
			*
			*		RETURN
			*	   - (multiple) person  ::  Returns a set of 'person' (user) records. 
		-->
		<Function name="getGroupMembers" doc="Gets a list of all the group members.">
			<Params>
				<Param name="id" type="string" required="false" doc="Group id"/>
				<Param name="uid" type="string" required="false" doc="Group uid"/>
				<Param name="is_owner" type="int" required="false" doc="1 to list the owners; 0 (or NULL) to list the members"/>
			</Params>
			<Return type="multiple" doc="Set of 'person' (user) records."/>

			<Begin>
				<Var name="members">
					<DataAccess method="execute" datasource="microsoftAPIAdminSDK">
						<Param name="_entity">group</Param>
						<Param name="_method">listUsers</Param>
						<Param name="id"><Var name="PARAMS" key="id"/></Param>
						<Param name="uid"><Var name="PARAMS" key="uid"/></Param>
						<Param name="is_owner"><Var name="PARAMS" key="is_owner"/></Param>
					</DataAccess>
				</Var>
				
				<Return>
					<Var name="members"/>
				</Return>
			</Begin>
		</Function>


		<!--
			*		updateGroup  |  Updates a group. 
			*  
			*		PARAMS
			*    - (string) id		 				 ::  Group id;
			*    - (string) uid		 				 ::  Group uid;
			*    - (string) display_name	 ::  Group name;
			*    - (string) description		 ::  Group description;
			*    - (int) mail_enabled			 ::  1 if the group's mail is enabled; 0, otherwise;
			*    - (int) security_enabled  ::  1 if the group's security is enabled; 0, otherwise;
			*
			*		RETURN
			*	   - (int) 0 | 1  ::  Returns 0 if the group was successfully updated. Otherwise, returns 1. 
		-->
		<Function name="updateGroup" doc="Updates a group.">
			<Params>
				<Param name="id" type="string" required="false" doc="Group id"/>
				<Param name="uid" type="string" required="false" doc="Group uid"/>
				<Param name="display_name" type="string" required="false" doc="Group name"/>			
				<Param name="description" type="string" required="false" doc="Group description"/>
				<Param name="mail_enabled" type="int" required="false" doc="1 if the group's mail is enabled; 0, otherwise"/>
				<Param name="security_enabled" type="int" required="false" doc="1 if the group's security is enabled; 0, otherwise"/>
			</Params>
			<Return type="int" doc="0 if the group was successfully updated; 1, otherwise."/>

			<Begin>
				<Var name="params">
					<UtilsLib method="filterNotNull">
						<Param><Var name="PARAMS"/></Param>
					</UtilsLib>
				</Var>
				<Var name="result">
					<DataAccess method="update" datasource="microsoftAPIAdminSDK" params="params">
						<Param name="_entity">group</Param>
						<Param name="id"><Var name="PARAMS" key="id"/></Param>
						<Param name="uid"><Var name="PARAMS" key="uid"/></Param>
					</DataAccess>
				</Var>
				
				<Return>
					<Var name="result"/>
				</Return>
			</Begin>
		</Function>


		<!--
			*		removePersonFromGroup  |  Removes a person from a group. 
			*  
			*		PARAMS
			*    - (string) id_group    ::  Group id;
			*    - (string) uid_group   ::  Group uid;
			*    - (string) uid_person  ::  Person uid.
			*
			*		RETURN
			*	   - (int) 0 | 1  ::  Returns 0 if the person was successfully removed from the group. Otherwise, returns 1. 
		-->
		<Function name="removePersonFromGroup" doc="Removes a person from a group.">
			<Params>
				<Param name="id_group" type="string" required="false" doc="Group id"/>
				<Param name="uid_group" type="string" required="false" doc="Group uid"/>
				<Param name="uid_person" type="string" required="true" doc="Person uid"/>
			</Params>
			<Return type="int" doc="0 if the person was successfully removed from the group; 1, otherwise."/>

			<Begin>
				<Var name="result">
					<DataAccess method="execute" datasource="microsoftAPIAdminSDK">
						<Param name="_entity">group</Param>
						<Param name="_method">removeUser</Param>
						<Param name="id"><Var name="PARAMS" key="id_group"/></Param>
						<Param name="uid"><Var name="PARAMS" key="uid_group"/></Param>
						<Param name="uid_user"><Var name="PARAMS" key="uid_person"/></Param>
					</DataAccess>
				</Var>

				<Return>
					<Var name="result"/>
				</Return>
			</Begin>
		</Function>


		<!--
			*		removeGroupOwner  |  Removes a person as owner of a group. 
			*  
			*		PARAMS
			*    - (string) id_group  	::  Group id;
			*    - (string) uid_group  	::  Group uid;
			*    - (string) uid_person  ::  Person uid.
			*
			*		RETURN
			*	   - (int) 0 | 1  ::  Returns 0 if the person was successfully removed as owner of the group. Otherwise, returns 1. 
		-->
		<Function name="removeGroupOwner" doc="Removes a person as owner of a group.">
			<Params>
				<Param name="id_group" type="string" required="false" doc="Group id"/>
				<Param name="uid_group" type="string" required="false" doc="Group uid"/>
				<Param name="uid_person" type="string" required="true" doc="Person uid"/>
			</Params>
			<Return type="int" doc="0 if the person was successfully removed as owner of the group; 1, otherwise."/>

			<Begin>
				<Var name="result">
					<DataAccess method="execute" datasource="microsoftAPIAdminSDK">
						<Param name="_entity">group</Param>
						<Param name="_method">removeOwner</Param>
						<Param name="id"><Var name="PARAMS" key="id_group"/></Param>
						<Param name="uid"><Var name="PARAMS" key="uid_group"/></Param>
						<Param name="uid_user"><Var name="PARAMS" key="uid_person"/></Param>
					</DataAccess>
				</Var>
				
				<Return>
					<Var name="result"/>
				</Return>
			</Begin>
		</Function>
	</Library>
</Node>
