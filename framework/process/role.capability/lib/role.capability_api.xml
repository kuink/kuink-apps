<?xml version="1.0" encoding="UTF-8"?>
<Node>
  <Doc>
    <Description><![CDATA[ Role_Capability API  ::  Allows the communication with 'fw_role_capability' table and all the related ones. ]]></Description>
  </Doc>
  <Permissions/>
  <Configuration/>
  <Libraries>
    <Use name="UtilsLib" type="lib"/>
  </Libraries>

  
  
  
  <!--	__________________________________________________________________________________________________________________________
		*
		*
		*			  L I B R A R Y
		*
    *		__________________________________________________________________________________________________________________________
	--> 
  <Library>
    <!--
			*		add  |  Assigns a capability to a role.
			*
			*		PARAMS
			*    - (int) id_role        ::  Role's id;
			*    - (int) id_capability  ::  Capability's id;
      *    - (int) id_company     ::  Role/capability's company.
			*
			*		RETURN
			*    - (int) id_role_capability  ::  Returns the created 'fw_role_capability' record's id.
      *
			*		ERRORS
      *    - (code) -1  ::  Returns -1 if the capability was already assigned to the role.
      *    - (code) -2  ::  Returns -2 if the capability isn't global or isn't applicable to the same company of the role.
		-->
    <Function scope="public" name="add" doc="Assigns a capability to a role.">
      <Params>
        <Param name="id_role" type="int" required="true" doc="Role's id"/>
        <Param name="id_capability" type="int" required="true" doc="Capability's id"/>
        <Param name="id_company" type="int" required="true" doc="Role/capability's company"/>
      </Params>
			<Return type="int" doc="The created 'fw_role_capability' record's id."/>
      <Errors>
        <Error code="-1" doc="The capability was already assigned to the role."/>
        <Error code="-2" doc="The capability isn't global or isn't applicable to the same company of the role."/>
      </Errors>

      <Begin>
        <!-- Validates the received parameters -->
        <Var name="result">
          <Call function="validateRoleCapability">
            <Param name="id_role"><Var name="PARAMS" key="id_role"/></Param>
            <Param name="id_capability"><Var name="PARAMS" key="id_capability"/></Param>
            <Param name="id_company"><Var name="PARAMS" key="id_company"/></Param>
            <Param name="is_insert">1</Param>
          </Call>
        </Var>

        <!-- If validation's ok, proceeds to insert -->
        <If condition="$result == 0">
          <Then>
            <!-- Creates the record -->
            <Var name="roleCapability" key="id">
              <DataAccess method="insert">
                <Param name="_entity">fw_role_capability</Param>
                <Param name="id_role"><Var name="PARAMS" key="id_role"/></Param>
                <Param name="id_capability"><Var name="PARAMS" key="id_capability"/></Param>
                <Param name="_id_updater"><Var name="USER" key="id"/></Param>
                <Param name="_modification"><Now/></Param>
                <Param name="_modification_ip"><Var name="USER" key="ip"/></Param>
                <Param name="_id_creator"><Var name="USER" key="id"/></Param>
                <Param name="_creation"><Now/></Param>
                <Param name="_creation_ip"><Var name="USER" key="ip"/></Param>
              </DataAccess>
            </Var>
            <!-- Logs this action (with the newly created record) -->
            <Var name="roleCapability">
              <Call function="get">
                <Param name="id"><Var name="roleCapability" key="id"/></Param>
              </Call>
            </Var>
            <Call library="framework,log,api" function="add">
              <Param name="type">framework,role.capability,api</Param>
              <Param name="action">insert</Param>
              <Param name="log_key"><Var name="roleCapability" key="id"/></Param>
              <Param name="context_data">
                <UtilsLib method="jsonEncode">
                  <Param><Var name="roleCapability"/></Param>
                </UtilsLib>
              </Param>
              <Param name="message">
                <Lang key="logRoleCapabilityInsert">
                  <Param><Var name="roleCapability" key="id"/></Param>
                </Lang>
              </Param>
            </Call>

            <!-- Returns role_capability's id -->
            <Var name="result"><Var name="roleCapability" key="id"/></Var>
          </Then>
        </If>

        <Return>
          <Var name="result"/>
        </Return>
      </Begin>
    </Function>


    <!--
			*		addByCode  |  Assigns a capability to a role, given the codes.
			*
			*		PARAMS
			*		 - (text) code_role			   ::  Role's code;
			*		 - (text) code_capability  ::  Capability's code;
      *		 - (int) id_company        ::  Role/capability's company.
			*
			*		RETURN
			*    - (int) id_role_capability  ::  Returns the created 'fw_role_capability' record's id.
      *
			*		ERRORS
      *    - (code) -1  ::  Returns -1 if the capability was already assigned to the role.
      *    - (code) -2  ::  Returns -2 if the capability isn't global or isn't applicable to the same company of the role.
		-->
    <Function scope="public" name="addByCode" doc="Assigns a capability to a role, given the codes.">
      <Params>
        <Param name="code_role" type="text" required="true" doc="Role's code"/>
        <Param name="code_capability" type="text" required="true" doc="Capability's code"/>
        <Param name="id_company" type="int" required="true" doc="Role/capability's company"/>
      </Params>
      <Return type="int" doc="The created 'fw_role_capability' record's id."/>
      <Errors>
        <Error code="-1" doc="The capability was already assigned to the role."/>
        <Error code="-2" doc="The capability isn't global or isn't applicable to the same company of the role."/>
      </Errors>

      <Begin>
        <!-- Gets the role and the capability, through the codes -->
        <Var name="role">
          <Call library="framework,role,api" function="getByCode">
            <Param name="code"><Var name="PARAMS" key="code_role"/></Param>
          </Call>
        </Var>
        <Var name="capability">
          <Call library="framework,capability,api" function="getByCode">
            <Param name="code"><Var name="PARAMS" key="code_capability"/></Param>
          </Call>
        </Var>
        <!-- Proceeds to insert -->
        <Var name="result">
          <Call function="add">
            <Param name="id_role"><Var name="role" key="id"/></Param>
            <Param name="id_capability"><Var name="capability" key="id"/></Param>
          </Call>
        </Var>

        <Return>
          <Var name="result"/>
        </Return>
      </Begin>
    </Function>


    <!--
			*		delete  |  Unassigns a capability from a role.
			*  
			*		PARAMS
			*		 - (int) id  ::  Role_capability's id.
      *
			*		RETURN
			*    - (int) 0  ::  Returns 0 if the capability was unassigned.
      *
			*		ERRORS
			*	   - (code) -1  ::  Returns -1 if the role_capability assignment doesn't exist.
		-->
    <Function scope="public" name="delete" doc="Unassigns a capability from a role.">
      <Params>
        <Param name="id" type="int" required="true" doc="Role_capability's id"/>
      </Params>
      <Return type="int" doc="0 if the capability was removed."/>
      <Errors>
        <Error code="-1" doc="The role_capability assignment doesn't exist."/>
      </Errors>

      <Begin>
        <Var name="error">0</Var>

        <!-- Checks if the role_capability exists:
          . If it doesn't, returns -1;
          . If it does, proceeds to delete;
        -->
        <Var name="roleCapability">
          <Call function="get">
            <Param name="id"><Var name="PARAMS" key="id"/></Param>
          </Call>
        </Var>
        <If condition="$roleCapability->id == ''">
          <Then>
            <Var name="error">-1</Var>
          </Then>
          <Else>
            <DataAccess method="delete">
              <Param name="_entity">fw_role_capability</Param>
              <Param name="id"><Var name="PARAMS" key="id"/></Param>
            </DataAccess>
            <!-- Logs this action -->
            <Call library="framework,log,api" function="add">
              <Param name="type">framework,role.capability,api</Param>
              <Param name="action">delete</Param>
              <Param name="log_key"><Var name="PARAMS" key="id"/></Param>
              <Param name="context_data">
                <UtilsLib method="jsonEncode">
                  <Param><Var name="roleCapability"/></Param>
                </UtilsLib>
              </Param>
              <Param name="message">
                <Lang key="logRoleCapabilityDelete">
                  <Param><Var name="PARAMS" key="id"/></Param>
                </Lang>
              </Param>
            </Call>
          </Else>
        </If>       

        <Return>
          <Var name="error"/>
        </Return>
      </Begin>
    </Function>


    <!--
			*		get  |  Gets a role_capability assignment, given its id.
			*
			*		PARAMS
			*    - (int) id  ::  Role_capability's id.
			*  
			*		RETURN
			*	   - (single) fw_role_capability  ::  Returns the corresponding 'fw_role_capability' record. 
		-->
    <Function scope="public" name="get" doc="Gets a role_capability assignment, given its id.">
      <Params>
        <Param name="id" type="int" required="true" doc="Role_capability's id"/>
      </Params>
      <Return type="single" doc="The corresponding 'fw_role_capability' record."/>

      <Begin>
        <Var name="roleCapability">
          <DataAccess method="load">
            <Param name="_entity">fw_role_capability</Param>
            <Param name="id"><Var name="PARAMS" key="id"/></Param>
          </DataAccess>
        </Var>

        <Return>
          <Var name="roleCapability"/>
        </Return>
      </Begin>
    </Function>


    <!--
			*		getAll  |  Gets a list of all the existing role_capability assignments. Can be filtered by company.
			*
			*		PARAMS
			*    - (int) id_company  ::  Company's id.
			*  
			*		RETURN
			*	   - (multiple) fw_role_capability  ::  Returns a set of 'fw_role_capability' records.
		-->
    <Function scope="public" name="getAll" doc="Gets a list of all the existing role_capability assignments. Can be filtered by company.">
      <Params>
        <Param name="id_company" type="int" required="false" doc="Company's id"/>
      </Params>
			<Return type="multiple" doc="Set of 'fw_role_capability' records."/>

      <Begin>
        <If condition="$PARAMS->id_company != ''">
          <Then>
            <Var name="roleCapabilities">
              <DataAccess method="this,this,getAllByCompany">
                <Param name="id_company"><Var name="PARAMS" key="id_company"/></Param>
              </DataAccess>
            </Var>
          </Then>
          <Else>
            <Var name="roleCapabilities">
              <DataAccess method="getAll">
                <Param name="_entity">fw_role_capability</Param>
              </DataAccess>
            </Var>
          </Else>
        </If>
        

				<Return>
					<Var name="roleCapabilities"/>
				</Return>
      </Begin>
    </Function>


    <!--
			*		getCapabilitiesByRole  |  Gets a list of all the capabilities that a role have, given its code (always in the context of a company).
			*
			*		PARAMS
			*    - (text) code_role  ::  Role's code;
      *    - (int) id_company  ::  Company's id.
      *
			*		RETURN
			*	   - (multiple) fw_capability  ::  Returns a set of 'fw_capability' records.
		-->
    <Function scope="public" name="getCapabilitiesByRole" doc="Gets a list of all the capabilities that a role have, given its code (always in the context of a company).">
      <Params>
        <Param name="code_role" type="text" required="true" doc="Role's code"/>
        <Param name="id_company" type="int" required="true" doc="Company's id"/>
      </Params>
      <Return type="multiple" doc="Set of 'fw_capability' records."/>

      <Begin>
        <Var name="capabilities">
					<DataAccess method="this,this,getCapabilitiesByRole">
            <Param name="code"><Var name="PARAMS" key="code_role"/></Param>
            <Param name="id_company"><Var name="PARAMS" key="id_company"/></Param>
					</DataAccess>
				</Var>

				<Return>
					<Var name="capabilities"/>
				</Return>
      </Begin>
    </Function>
  

    <!--
			*		getCapabilitiesOfRolesList  |  Gets a list of all the capabilities that a set of roles have (always in the context of a company).
			*
			*		PARAMS
			*    - (text) code_role_list  ::  Roles' codes' list (separated by comma);
      *    - (int) id_company       ::  Company's id.
      *
			*		RETURN
			*	   - (multiple) fw_role_capability  ::  Returns a set of 'fw_role_capability' records.
		-->
    <Function scope="public" name="getCapabilitiesOfRolesList" doc="Gets a list of all the capabilities that a set of roles have (always in the context of a company).">
      <Params>
        <Param name="code_role_list" type="text" required="true" doc="Roles' codes' list (separated by comma)"/>
        <Param name="id_company" type="int" required="true" doc="Company's id"/>
      </Params>
			<Return type="multiple" doc="Set of 'fw_role_capability' records."/>

      <Begin>
        <Var name="capabilities">
					<DataAccess method="this,this,getCapabilitiesOfRolesList">
            <Param name="code_role_list"><Var name="PARAMS" key="code_role_list"/></Param>
            <Param name="id_company"><Var name="PARAMS" key="id_company"/></Param>
					</DataAccess>
				</Var>

				<Return>
					<Var name="capabilities"/>
				</Return>
      </Begin>
    </Function>


    <!--
			*		search  |  Gets a list of role_capability assignments that meet the given criteria.
			*
      *		PARAMS
			*    - (text) text          ::  Role/Capability's name or code;
			*    - (int) id_role        ::  Role's id;
			*    - (int) id_capability  ::  Capability's id;
      *    - (int) id_company     ::  Role/capability's company;
      *		 - (int) pageNum        ::  Page to get;
      *		 - (int) pageSize       ::  Number of records per page.
			*
			*		RETURN
			*	   - (multiple) fw_role_capability  ::  Returns a set of 'fw_role_capability' records.
		--> 
    <Function scope="public" name="search" doc="Gets a list of role_capability assignments that meet the given criteria.">
      <Params>
        <Param name="text" type="text" required="false" doc="Role/Capability's name or code"/>
        <Param name="id_role" type="int" required="false" doc="Role's id"/>
        <Param name="id_capability" type="int" required="false" doc="Capability's id"/>
        <Param name="id_company" type="int" required="false" doc="Role/capability's company"/>
        <Param name="pageNum" type="int" required="false" doc="Page to get"/>
        <Param name="pageSize" type="int" required="false" doc="Number of records per page"/>
      </Params>
      <Return type="multiple" doc="Set of 'fw_role_capability' records"/>

      <Begin>
        <Var name="rolesCapabilities">
          <DataAccess method="this,this,search">
            <Param name="text" wildcard="fullSplit"><Var name="PARAMS" key="text"/></Param>
            <Param name="id_role"><Var name="PARAMS" key="id_role"/></Param>
            <Param name="id_capability"><Var name="PARAMS" key="id_capability"/></Param>
            <Param name="id_company"><Var name="PARAMS" key="id_company"/></Param>
            <Param name="_pageNum"><Var name="PARAMS" key="pageNum"/></Param>
            <Param name="_pageSize"><Var name="PARAMS" key="pageSize"/></Param>
          </DataAccess>
        </Var>
         
        <Return>
          <Var name="rolesCapabilities"/>  
        </Return>
      </Begin>
    </Function>
       

    <!--
			*		update  |  Updates a role_capability assignment.
			*
			*		PARAMS
			*		 - (int) id    			    ::  Role_capability's id;
			*    - (int) id_role        ::  Role's id;
			*    - (int) id_capability  ::  Capability's id;
      *    - (int) id_company     ::  Role/capability's company.
			*
			*		RETURN
			*    - (int) 0  ::  Returns 0 if the capability was updated.
      *
			*		ERRORS
      *    - (code) -1  ::  Returns -1 if the capability was already assigned to the role.
      *    - (code) -2  ::  Returns -2 if the capability isn't global or isn't applicable to the same company of the role.
    -->
    <Function scope="public" name="update" doc="Updates a role_capability assignment.">
      <Params>
        <Param name="id" type="int" required="true" doc="Roles_capability's id"/>
        <Param name="id_role" type="int" required="true" doc="Role's id"/>
        <Param name="id_capability" type="int" required="true" doc="Capability's id"/>
        <Param name="id_company" type="int" required="true" doc="Role/capability's company"/>
      </Params>
      <Return type="int" doc="0 if the capability was updated."/>
      <Errors>
        <Error code="-1" doc="The capability was already assigned to the role."/>
        <Error code="-2" doc="The capability isn't global or isn't applicable to the same company of the role."/>
      </Errors>

      <Begin>
        <!-- Validates the received parameters -->
        <Var name="result">
          <Call function="validateRoleCapability">
            <Param name="id"><Var name="PARAMS" key="id"/></Param>
            <Param name="id_role"><Var name="PARAMS" key="id_role"/></Param>
            <Param name="id_capability"><Var name="PARAMS" key="id_capability"/></Param>
            <Param name="id_company"><Var name="PARAMS" key="id_company"/></Param>
            <Param name="is_insert">0</Param>
          </Call>
        </Var>

        <!-- If validation's ok, proceeds to update -->
        <If condition="$result == 0">
          <Then>
            <DataAccess method="update">
              <Param name="_entity">fw_role_capability</Param>
              <Param name="id"><Var name="PARAMS" key="id"/></Param>
              <Param name="id_role"><Var name="PARAMS" key="id_role"/></Param>
              <Param name="id_capability"><Var name="PARAMS" key="id_capability"/></Param>
              <Param name="_id_updater"><Var name="USER" key="id"/></Param>
              <Param name="_modification"><Now/></Param>
              <Param name="_modification_ip"><Var name="USER" key="ip"/></Param>
            </DataAccess>
            <!-- Logs this action (with the updated record) -->
            <Var name="updatedRoleCapability">
              <DataAccess method="load">
                <Param name="_entity">fw_role_capability</Param>
                <Param name="id"><Var name="PARAMS" key="id"/></Param>
              </DataAccess>
            </Var>
            <Call library="framework,log,api" function="add">
              <Param name="type">framework,role.capability,api</Param>
              <Param name="action">update</Param>
              <Param name="log_key"><Var name="PARAMS" key="id"/></Param>
              <Param name="context_data">
                <UtilsLib method="jsonEncode">
                  <Param><Var name="updatedRoleCapability"/></Param>
                </UtilsLib>
              </Param>
              <Param name="message">
                <Lang key="logRoleCapabilityUpdate">
                  <Param><Var name="PARAMS" key="id"/></Param>
                </Lang>
              </Param>
            </Call>
          </Then>
        </If>

        <Return>
          <Var name="result"/>
        </Return>
      </Begin>
    </Function>
    
    
    <!--
			*		validateRoleCapability  |  Validates the parameters of a role_capability assignment.
			*
			*		PARAMS
			*		 - (int) id      			     ::  Role_capability's id;
			*		 - (int) id_role			     ::  Role's id;
			*		 - (int) id_capability     ::  Capability's id;
			*		 - (text) code_role			   ::  Role's code;
			*		 - (text) code_capability  ::  Capability's code;
      *		 - (int) id_company        ::  Role/capability's company;
      *    - (int) is_insert         ::  1 if it's a new assignment; 0 if it's an update.
			*
			*		RETURN
			*    - (int) 0  ::  Returns 0 if all the params are valid.
      *
			*		ERRORS
      *    - (code) -1  ::  Returns -1 if the capability was already assigned to the role.
      *    - (code) -2  ::  Returns -2 if the capability isn't global or isn't applicable to the same company of the role.
    -->
    <Function scope="private" name="validateRoleCapability" doc="Validates the parameters of a role_capability assignment.">
      <Params>
        <Param name="id" type="int" required="false" doc="Role_capability's id"/>
        <Param name="id_role" type="int" required="false" doc="Role's id"/>
        <Param name="id_capability" type="int" required="false" doc="Capability's id"/>
        <Param name="code_role" type="text" required="false" doc="Role's code"/>
        <Param name="code_capability" type="text" required="false" doc="Capability's code"/>
        <Param name="id_company" type="int" required="true" doc="Role/capability's company"/>
        <Param name="is_insert" type="int" required="true" doc="1 if it's a new assignment; 0 if it's an update"/>
      </Params>
			<Return type="int" doc="0 if all the params are valid."/>
      <Errors>
        <Error code="-1" doc="The capability was already assigned to the role."/>
        <Error code="-2" doc="The capability isn't global or isn't applicable to the same company of the role."/>
      </Errors>
      
      <Begin>
        <Var name="error">0</Var>

        <!-- According to the params, gets the capabilities by one of the following options:
          . The role's and capability's code and company;
          . The role's and capability's id.
        -->
        <If condition="$PARAMS->id_role == '' || $PARAMS->id_capability == ''">
          <Then>
            <Var name="role">
              <Call library="framework,role,api" function="getByCode">
                <Param name="code"><Var name="PARAMS" key="code_role"/></Param>
                <Param name="id_company"><Var name="PARAMS" key="id_company"/></Param>
              </Call>
            </Var>
            <Var name="capability">
              <Call library="framework,capability,api" function="getByCode">
                <Param name="code"><Var name="PARAMS" key="code_capability"/></Param>
                <Param name="id_company"><Var name="PARAMS" key="id_company"/></Param>
              </Call>
            </Var>
          </Then>
          <Else>
            <Var name="role">
              <Call library="framework,role,api" function="getById">
                <Param name="id"><Var name="PARAMS" key="id_role"/></Param>
              </Call>
            </Var>
            <Var name="capability">
              <Call library="framework,capability,api" function="getById">
                <Param name="id"><Var name="PARAMS" key="id_capability"/></Param>
              </Call>
            </Var>
          </Else>
        </If>

        <!-- Checks for errors:
          . Returns -1 if the capability was already assigned to the role;
          . Returns -2 if the capability isn't global OR isn't applicable to the role's company.
        -->
        <Var name="roleCapability">
          <DataAccess method="load">
            <Param name="_entity">fw_role_capability</Param>
            <Param name="id_role"><Var name="role" key="id"/></Param>
            <Param name="id_capability"><Var name="capability" key="id"/></Param>
          </DataAccess>
        </Var>
        <If condition="($roleCapability->id != '') &amp;&amp; (($PARAMS->is_insert == 1) || ($PARAMS->is_insert == 0 &amp;&amp; $roleCapability->id != $PARAMS->id))">
          <Then><Var name="error">-1</Var></Then>
        </If>
        <If condition="$capability->is_global != 1 &amp;&amp; ($PARAMS->id_company != ($capability->id_company || $role->id_company)) &amp;&amp; ($capability->id_company != $role->id_company)">
          <Then><Var name="error">-2</Var></Then>
        </If>

        <Return>
          <Var name="error"/>
        </Return>
      </Begin>
    </Function>
  </Library>
</Node>
